searchState.loadedDescShard("pulldown_cmark", 0, "Pull parser for CommonMark. This crate provides a Parser …\nTable column text alignment.\nAutolink like <code>&lt;http://foo.bar/baz&gt;</code>\nA borrowed string.\nAn owned, immutable string.\nAn inline code node.\nA code block.\nCodeblock kind.\nCollapsed link like <code>[foo][]</code>\nCollapsed link without destination in the document, but …\nA copy-on-write string that can be owned, borrowed or …\nExtension to allow headings to have ID and classes.\nEmail address in autolink like <code>&lt;john@example.org&gt;</code>\nEnd of a tagged element.\nMarkdown events that are generated in a preorder traversal …\nThe value contained in the tag describes the language of …\nA footnote definition. The value contained is the footnote…\nA reference to a footnote with given label, which may or …\nA hard line break.\nA heading. The first field indicates the level of the …\nAn HTML node.\nAn image. The first field is the link type, the second the …\nInline link like <code>[foo](bar)</code>\nAn inline string that can contain almost three words of …\nA short inline string.\nReturned when trying to convert a <code>usize</code> into a <code>Heading</code> but …\nA list item.\nA link. The first field is the link type, the second the …\nContains the destination URL, title and source span of a …\nType specifier for inline links. See the Tag::Link for …\nA list. If the list is ordered the field indicates the …\nNo value.\nDefault text alignment.\nMarkdown event and source range iterator.\nOption struct containing flags for enabling extra features …\nA paragraph of text and other inline elements.\nMarkdown event iterator.\nKeeps track of the reference definitions defined in the …\nReference link like <code>[foo][bar]</code>\nReference without destination in the document, but …\nA horizontal ruler.\nShortcut link like <code>[foo]</code>\nShortcut without destination in the document, but resolved …\nA soft line break.\nSome value of type <code>T</code>.\nStart of a tagged element. Events that are yielded after …\nA table. Contains a vector describing the text-alignment …\nA table header. Contains only <code>TableCell</code>s. Note that the …\nA table row. Is used both for header rows as body rows. …\nTags for elements that can contain other elements.\nA task list marker, rendered as a checkbox in HTML. …\nA text node.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nUtility functions for HTML escaping. Only useful when …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nPerforms a lookup on reference label using unicode case …\nHTML renderer that takes an iterator of events as input.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the event iterator and produces an iterator that …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nProvides an iterator over all the document’s reference …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates a new event iterator for a markdown string without …\nCreates a new event iterator for a markdown string with …\nIn case the parser encounters any potential links that …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns a reference to the internal <code>RefDefs</code> object, which …\nReturns a reference to the internal reference definition …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTrait that allows writing string slices. This is basically …\nThis wrapper exists because we can’t have both a blanket …\nWrites an href to the buffer, escaping href unsafe bytes.\nWrites the given string to the Write sink, replacing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate over an <code>Iterator</code> of <code>Event</code>s, generate HTML for each …\nIterate over an <code>Iterator</code> of <code>Event</code>s, generate HTML for each …")