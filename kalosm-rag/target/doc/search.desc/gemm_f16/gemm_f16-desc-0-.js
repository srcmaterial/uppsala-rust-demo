searchState.loadedDescShard("gemm_f16", 0, "Approximate number of <code>f16</code> significant digits in base 10\n<code>f16</code> Euler’s number (ℯ)\n<code>f16</code> machine epsilon value\n<code>f16</code> 1/π\n<code>f16</code> 1/√2\n<code>f16</code> 2/π\n<code>f16</code> 2/√π\n<code>f16</code> π/2\n<code>f16</code> π/3\n<code>f16</code> π/4\n<code>f16</code> π/6\n<code>f16</code> π/8\n<code>f16</code> positive Infinity (+∞)\n<code>f16</code> 𝗅𝗇 10\n<code>f16</code> 𝗅𝗇 2\n<code>f16</code> 𝗅𝗈𝗀₁₀2\n<code>f16</code> 𝗅𝗈𝗀₁₀ℯ\n<code>f16</code> 𝗅𝗈𝗀₂10\n<code>f16</code> 𝗅𝗈𝗀₂ℯ\nNumber of <code>f16</code> significant digits in base 2\nLargest finite <code>f16</code> value\nMaximum possible <code>f16</code> power of 10 exponent\nMaximum possible <code>f16</code> power of 2 exponent\nMaximum subnormal <code>f16</code> value\nSmallest finite <code>f16</code> value\nMinimum possible normal <code>f16</code> power of 10 exponent\nOne greater than the minimum possible normal <code>f16</code> power of …\nSmallest positive normal <code>f16</code> value\nMinimum positive subnormal <code>f16</code> value\n<code>f16</code> Not a Number (NaN)\n<code>f16</code> negative infinity (-∞)\n<code>f16</code> -1\n<code>f16</code> -0\n<code>f16</code> 1\n<code>f16</code> Archimedes’ constant (π)\nThe radix or base of the internal representation of <code>f16</code>\n<code>f16</code> √2\n<code>f16</code> 0\nRestrict a value to a certain interval unless it is NaN.\nReturns the floating point category of the number.\nReturns a number composed of the magnitude of <code>self</code> and the …\nA 16-bit floating point type implementing the IEEE …\nReturns the argument unchanged.\nCreates a floating point value from its representation as …\nConstructs a 16-bit floating point value from the raw bits.\nConstructs a 16-bit floating point value from a 32-bit …\nConstructs a 16-bit floating point value from a 32-bit …\nConstructs a 16-bit floating point value from a 64-bit …\nConstructs a 16-bit floating point value from a 64-bit …\nCreates a floating point value from its representation as …\nCreates a floating point value from its representation as …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is ±∞ and <code>false</code>. otherwise.\nReturns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if and only if <code>self</code> has a negative sign, …\nReturns <code>true</code> if and only if <code>self</code> has a positive sign, …\nReturns the maximum of the two numbers.\nReturns the minimum of the two numbers.\nReturns a number that represents the sign of <code>self</code>.\nReturns the memory representation of the underlying bit …\nConverts a <code>f16</code> into the underlying bit representation.\nConverts a <code>f16</code> value into a <code>f32</code> value.\nConverts a <code>f16</code> value into a <code>f32</code> value.\nConverts a <code>f16</code> value into a <code>f64</code> value.\nConverts a <code>f16</code> value into a <code>f64</code> value.\nReturns the memory representation of the underlying bit …\nReturns the memory representation of the underlying bit …\nReturns the ordering between <code>self</code> and <code>other</code>.")