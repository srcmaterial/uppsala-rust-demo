searchState.loadedDescShard("safetensors", 0, "Python Pypi Documentation Codecov Downloads\nModule handling lazy loading via iterating on slices on …\nModule Containing the most important structures\nTrait used to implement multiple signatures for ease of …\nError representing invalid slicing attempt\nThis is a regular slice, purely indexing a chunk of the …\nThis is selecting an entire dimension\nIterator used to return the bits of the overall tensor …\nWhen the client asked for a slice that exceeds the allowed …\nGeneric structure used to index a slice of the tensor\nWhen the client asked for more slices than the tensors has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGives back the amount of bytes still being in the iterator\nGives back the amount of bytes still being in the iterator\nReturns a slicing iterator which are the chunks of data …\nThe problematic value\nThe rank of the dimension that has the out of bounds\nThe dimension size we shouldn’t go over.\nBrain floating point\nBoolan type\nThe various available dtypes. They MUST be in increasing …\nHalf-precision floating point\nFloating point (32-bit)\nFloating point (64-bit)\nFP8 https://arxiv.org/pdf/2209.05433.pdf_\nFP8 https://arxiv.org/pdf/2209.05433.pdf_\nThe header is large than 100Mo which is considered too …\nThe header is smaller than 8 bytes\nSigned integer (16-bit)\nSigned integer (32-bit)\nSigned integer (64-bit)\nSigned byte\nThe header is an invalid UTF-8 string and cannot be read.\nThe header does contain a valid string, but it is not …\nThe header length is invalid\nThe header’s first byte is not the expected <code>{</code>.\nThe offsets declared for tensor with name <code>String</code> in the …\nThe follow tensor cannot be created because the buffer …\nIoError\nJSON error\nThe stuct representing the header of safetensor files …\nThe metadata is invalid because the data offsets of the …\nPossible errors that could occur while reading A …\nA structure owning some metadata to lookup tensors on a …\nA single tensor information. Endianness is assumed to be …\nInvalid information between shape, dtype and the proposed …\nThe tensor name was not found in the archive\nA view of a Tensor within the file. Contains references to …\nUnsigned integer (16-bit)\nUnsigned integer (32-bit)\nUnsigned integer (64-bit)\nUnsigned byte\nThe metadata contains information (shape or shape * dtype …\nThe trait necessary to enable safetensors to serialize a …\nThe data of the tensor\nThe current tensor byte-buffer\nThe length of the data, in bytes. This is necessary as …\nThe offsets to find the data within the byte-buffer array.\nGiven a byte-buffer representing the whole safetensor file …\nThe <code>Dtype</code> of the tensor\nThe current tensor dtype\nThe type of each element of the tensor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGives back the tensor metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicate if the SafeTensors contains or not any tensor.\nReturns an iterator over the tensors contained within the …\nReturn how many tensors are currently stored within the …\nGives back the tensor metadata\nReturn the names of the tensors within the SafeTensors. …\nCreate new tensor view\nGiven a byte-buffer representing the whole safetensor file …\nSerialize to an owned byte buffer the dictionnary of …\nSerialize to a regular file the dictionnary of tensors. …\nThe shape of the tensor\nThe current tensor shape\nThe shape of the tensor\nGives out the size (in bytes) of 1 element of this dtype.\nThe various pieces of the data buffer according to the …\nAllow the user to get a specific tensor within the …\nReturns the tensors contained within the SafeTensors. The …\nGives back the tensor metadata")