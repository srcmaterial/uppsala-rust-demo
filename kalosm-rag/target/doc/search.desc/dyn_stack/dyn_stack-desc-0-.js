searchState.loadedDescShard("dyn_stack", 0, "Stack that allows users to allocate dynamically sized …\nOwns an unsized array of data, allocated from some stack.\nAllocation requirements for an empty unaligned buffer.\n<code>Error</code> is a trait representing the basic expectations for …\nStack wrapper around a buffer of uninitialized bytes.\nUnsatisfiable allocation requirements.\nStack wrapper around a buffer of bytes.\nStack allocation requirements.\nOwns an unsized array of data, allocated from some stack.\nThe alignment of allocated bytes required, or <code>0</code> if the …\nThe required allocation to allocate storage sufficient for …\nThe required allocation to allocate storage sufficient for …\nThe required allocation to allocate storage sufficient for …\nSame as <code>StackReq::and</code> repeated <code>n</code> times.\nReturns a pointer to the (possibly uninitialized) stack …\nReturns a pointer to the stack memory.\nReturns <code>true</code> if the stack can hold an allocation with the …\nReturns <code>true</code> if the stack can hold an allocation with the …\nReturns a new <code>DynArray</code>, initialized with the provided …\nReturns a new slice, initialized with the provided …\nReturns a new aligned <code>DynArray</code>, initialized with the …\nReturns a new aligned slice, initialized with the provided …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some reference to the inner value if it is of type …\nForwards to the method defined on the type <code>dyn Error</code>.\nAllocation requirements for an empty unaligned buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nReturns the corresponding layout for the allocation size …\nReturns the number of bytes that this stack can hold.\nReturns the number of bytes that this stack can hold.\nReturns a new aligned and uninitialized slice and a stack …\nReturns a new aligned and uninitialized <code>DynArray</code> and a …\nReturns a new aligned and uninitialized slice and a stack …\nReturns a new aligned <code>DynArray</code>, initialized with the …\nReturns a new aligned slice, initialized with the provided …\nReturns a new uninitialized slice and a stack over the …\nReturns a new uninitialized <code>DynArray</code> and a stack over the …\nReturns a new <code>DynArray</code>, initialized with the provided …\nReturns a new slice, initialized with the provided …\nReturns a new <code>MemStack</code> from the provided memory buffer.\nReturns a new <code>PodStack</code> from the provided memory buffer.\nAllocation requirements sufficient for <code>n</code> elements of type <code>T</code>…\nAllocation requirements sufficient for <code>n</code> elements of type <code>T</code>…\nReturns a new <code>MemStack</code> from the provided memory buffer.\nReturns a new <code>MemStack</code> from the provided memory buffer.\nThe required allocation to allocate storage sufficient for …\nProvides type-based access to context intended for error …\nThe number of allocated bytes required, aligned to …\nReturns the lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nThe number of allocated bytes required, with no alignment …\nAn implementation of <code>Allocator</code> can allocate, grow, shrink, …\nAttempts to allocate a block of memory.\nBehaves like <code>allocate</code>, but also ensures that the returned …\nCreates a “by reference” adapter for this instance of …\nDeallocates the memory referenced by <code>ptr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to extend the memory block.\nBehaves like <code>grow</code>, but also ensures that the new contents …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to shrink the memory block.\nError during memory allocation.\nBuffer of uninitialized bytes to serve as workspace for …\nBuffer of initialized bytes to serve as workspace for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>MemBuffer</code> from its raw components.\nCreates a <code>PodBuffer</code> from its raw components.\nCreates a <code>MemBuffer</code> from its raw components.\nCreates a <code>PodBuffer</code> from its raw components.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecomposes a <code>MemBuffer</code> into its raw components in this …\nDecomposes a <code>PodBuffer</code> into its raw components in this …\nDecomposes a <code>MemBuffer</code> into its raw components in this …\nDecomposes a <code>PodBuffer</code> into its raw components in this …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …")