searchState.loadedDescShard("memo_map", 0, "A concurrent insert only hash map.\nAn iterator over the items of a <code>MemoMap</code>.\nA mutable iterator over a <code>MemoMap</code>.\nAn iterator over the keys of a <code>MemoMap</code>.\nAn insert only, thread safe hash map to memoize values.\nA mutable iterator over a <code>MemoMap</code>.\nClears the map, removing all elements.\nReturns true if the map contains a value for the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the key …\nLike <code>get_or_insert</code> but with an owned key.\nReturns a reference to the value corresponding to the key …\nLike <code>get_or_try_insert</code> but with an owned key.\nInserts a value into the memo map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the memo map contains no items.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of items in the map.\nCreates an empty <code>MemoMap</code>.\nRemoves a key from the memo map, returning the value at …\nInserts a value into the memo map replacing the old value.\nAn iterator visiting all values mutably in arbitrary …\nCreates an empty <code>MemoMap</code> which will use the given hash …")