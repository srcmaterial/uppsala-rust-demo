searchState.loadedDescShard("heed_types", 0, "Types that can be used to serialize and deserialize types …\nDescribes a byte slice <code>[u8]</code> that is totally borrowed and …\nA convenient struct made to ignore the type when decoding …\nEncodable version of <code>i128</code>.\nEncodable version of <code>i16</code>.\nEncodable version of <code>i32</code>.\nEncodable version of <code>i64</code>.\nEncodable version of <code>i8</code>.\nOwns bytes that can be decoded on demand.\nLazily decodes the data bytes.\nDescribes a type that is <code>Serialize</code>/<code>Deserialize</code> and uses …\nDescribes a type that is <code>Serialize</code>/<code>Deserialize</code> and uses …\nDescribes a <code>str</code>.\nEncodable version of <code>u128</code>.\nEncodable version of <code>u16</code>.\nEncodable version of <code>u32</code>.\nEncodable version of <code>u64</code>.\nEncodable version of <code>u8</code>.\nDescribes the unit <code>()</code> type.\nDecode the given bytes as <code>DItem</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the codec type of the given bytes, specifying the …")