searchState.loadedDescShard("arroy", 0, "Arroy (Approximate Rearest Reighbors Oh Yeah) is a Rust …\nThe options available when building the arroy database.\nReturned iff the <code>should_abort</code> function returned true.\nThe database required by arroy for reading or writing …\nAn internal error returned when arroy cannot generate …\nA trait used by arroy to compute the distances, compute …\nContains the error value\nThe different set of errors that arroy can encounter.\nA header structure with informations related to the\nAn internal error mostly related to LMDB or …\nThe user tried to append an item in the database but the …\nThe user is trying to insert or search for a vector that …\nIO error\nAn identifier for the items stored in the database.\nInternal error\nArroy is not able to find the metadata for a given index. …\nThe last time items in the database were updated, the […\nContains the success value\nOptions used to make a query against an arroy <code>Reader</code>.\nA reader over the arroy trees and user items.\nA custom Result type that is returning an arroy error by …\nThe different stats of an arroy database.\nThe different stats of a tree in an arroy database.\nThe user is trying to query a database with a distance …\nA writer to store new items, remove existing ones, and …\nAdd an item associated to a vector in the database.\nAttempt to append an item into the database. It is …\nGenerates a forest of <code>n_trees</code> trees.\nReturns an <code>ArroyBuilder</code> to configure the available options …\nReturns a non-normalized distance.\nReturns the closests items from <code>item</code>.\nReturns the closest items from the provided <code>vector</code>.\nProvide a closure that can cancel the indexing process …\nSpecify a subset of candidates to inspect. Filters out …\nRemoves everything in the database, user items and …\nReturns <code>true</code> if the database contains the given item.\nReturns <code>true</code> if the database contains the given item.\nDeletes an item stored in this database and returns <code>true</code> …\nThe depth of the tree.\nNumber of descendants nodes in the tree.\nReturns the number of dimensions in the index.\nThe set of distances implementing the <code>Distance</code> and …\nThe number of split plane normals that were set to zero …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of this reader in the database.\nThe set of types used by the <code>Distance</code> trait.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the index is empty.\nReturns <code>true</code> if the index is empty.\nReturns all the item ids contained in this index.\nReturns the vector for item <code>i</code> that was previously added.\nReturns an <code>Option</code>al vector previous stored in this …\nReturns an iterator over the items vector.\nReturns an iterator over the items vector.\nNumber of leaf node or item vectors.\nReturns the number of vectors stored in the index.\nReturns the number of nodes in the index. Useful to run an …\nThe number of trees to build. If not set arroy will …\nReturns the number of trees in the index.\nReturns <code>true</code> if the index needs to be built before being …\nCreates a new writer from a database, index and dimensions.\nReturn a <code>QueryBuilder</code> that lets you configure and execute …\nNormalizes the distance returned by the distance method.\nNormalizes the distance returned by the distance method.\nReturns a reader over the database with the specified …\nOversampling will multiply [<code>search_k</code>] by the specified …\nReturns a writer after having deleted the tree nodes and …\nDuring the query, arroy will inspect up to <code>search_k</code> nodes …\nSpecifies the folder in which arroy will write temporary …\nConfigure the maximum number of items stored in a …\nNumber of split nodes in the tree.\nReturns the stats of the trees of this database.\nThe stats of each individual tree.\nThe expected number of dimensions.\nThe expected distance type.\nThe index that caused the error\nThe item ID queried\nThe kind of item that was being queried\nThe dimensions given by the user.\nThe distance given by the user.\nThe Cosine similarity is a measure of similarity between …\nThe Euclidean distance between two points in Euclidean …\nA taxicab geometry or a Manhattan geometry is a geometry …\nThe Cosine similarity is a measure of similarity between …\nIn mathematics, the dot product or scalar product is an …\nThe Euclidean distance between two points in Euclidean …\nA taxicab geometry or a Manhattan geometry is a geometry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNormalizes the distance returned by the distance method.\nNormalizes the distance returned by the distance method.\nNormalizes the distance returned by the distance method.\nThe heed codec used internally to encode/decoding the …\nA leaf node which corresponds to the vector inputed by the …\nThe left side.\nThe codec used internally to encode and decode nodes.\nThe header of <code>BinaryQuantizedCosine</code> leaf nodes.\nThe header of <code>BinaryQuantizedEuclidean</code> leaf nodes.\nThe header of BinaryQuantizedEuclidean leaf nodes.\nThe header of Cosine leaf nodes.\nThe header of DotProduct leaf nodes.\nThe header of Euclidean leaf nodes.\nThe header of Manhattan leaf nodes.\nThe right side.\nA type that is used to decide on which side of a plane we …\nReturned in case you tried to make an unaligned vector …\nA wrapper struct that is used to read unaligned vectors …\nDetermine the way the vectors should be read and written …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an unaligned vector from a slice of bytes. Don’t …\nCreates an unaligned vector from a slice of bytes. Don’t …\nCreates an unaligned vector from a slice of f32. May …\nCreates an unaligned vector from a slice of f32. May …\nCreates an unaligned slice of f32 wrapper from a slice of …\nCreates an unaligned slice of f32 wrapper from a slice of …\nThe header of this leaf.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the leaf into an owned version of itself by …\nReturns wether it is empty or not.\nReturns true if all the elements in the vector are equal …\nReturns true if all the elements in the vector are equal …\nReturns an iterator of f32 that are read from the vector. …\nReturns an iterator of f32 that are read from the vector. …\nReturns the len of the vector in terms of elements.\nReturns the len of the vector in terms of elements.\nConverts the <code>UnalignedVector</code> to an aligned vector of <code>f32</code>. …\nReturns an allocated and aligned <code>Vec&lt;f32&gt;</code>.\nThe vector of this leaf.")