searchState.loadedDescShard("synchronoise", 0, "A collection of synchronization primitives that build on …\n“Event” primitives, allowing one thread to wait on a …\nSupport module for <code>WriterReaderPhaser</code> and related structs.\nReturned when attempting to modify the counter after it …\nAn activated <code>SignalEvent</code> automatically resets when a …\nThe collection of errors that can be returned by …\nA synchronization primitive that signals when its count …\nAn opaque guard struct that decrements the count of a …\nAn activated <code>SignalEvent</code> must be manually reset to block …\nReturned when adding to a counter would have caused it to …\nA synchronization primitive that allows one or more …\nDetermines the reset behavior of a <code>SignalEvent</code>.\nReturned when attempting to signal would have caused the …\nAdds the given count to the counter.\nCreates a new automatically-resetting <code>SignalEvent</code> with the …\nReturns the current counter value.\nSubtracts one from the counter, and returns whether this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrements the counter, then returns a guard object that …\nAdds one to the count.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new manually-resetting <code>SignalEvent</code> with the …\nCreates a new <code>CountdownEvent</code>, initialized to the given …\nCreates a new <code>SignalEvent</code> with the given starting state …\nResets the counter to the count given to <code>new</code>.\nResets the signal on this <code>SignalEvent</code>, allowing threads …\nResets the counter to the given count.\nSubtracts the given count to the counter, and returns …\nSets the signal on this <code>SignalEvent</code>, potentially waking up …\nReturns the current signal status of the <code>SignalEvent</code>.\nBlocks the current thread until the counter reaches zero.\nBlocks this thread until another thread calls <code>signal</code>.\nBlocks the current thread until the timer reaches zero, or …\nBlocks this thread until either another thread calls <code>signal</code>…\nGuard struct that represents a “writer critical section…\nGuard struct for a <code>WriterReaderPhaser</code> that allows a reader …\nA synchronization primitive that allows for multiple …\nWait until all currently-active writer critical sections …\nWait until all currently-active writer critical sections …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>WriterReaderPhaser</code>.\nEnter a reader criticial section, potentially blocking …\nEnters a writer critical section, returning a guard object …")