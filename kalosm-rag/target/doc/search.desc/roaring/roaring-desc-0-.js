searchState.loadedDescShard("roaring", 0, "This is a Rust port of the Roaring bitmap data structure, …\nA <code>Iterator::collect</code> blanket implementation that provides …\nAn error type that is returned when an iterator isn’t …\nThe type of output from operations.\nA compressed bitmap using the Roaring bitmap compression …\nThe <code>difference</code> between all elements.\nReturns the argument unchanged.\nThe <code>intersection</code> between all elements.\nCalls <code>U::from(self)</code>.\nThe <code>symmetric difference</code> between all elements.\nA compressed bitmap with u64 values.  Implemented as a …\nThe <code>union</code> between all elements.\nReturns the number of elements that were\nAn iterator for <code>RoaringBitmap</code>.\nAn iterator for <code>RoaringBitmap</code>.\nA compressed bitmap using the Roaring bitmap compression …\nDetailed statistics on the composition of a bitmap.\nAdvance the back of the iterator to the first position …\nAdvance the back of the iterator to the first position …\nAdvance the iterator to the first position where the item …\nAdvance the iterator to the first position where the item …\nExtend the set with a sorted iterator.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nNumber of values stored in the bitmap\nClears all integers in this set.\nReturns <code>true</code> if this set contains the specified integer.\nReturns <code>true</code> if all values in the range are present in …\nDeserialize a bitmap into memory from the standard Roaring …\nDeserialize a bitmap into memory from the standard Roaring …\nComputes the len of the difference with the specified …\nInserts multiple values and returns the count of new …\nInserts multiple values and returns the count of new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RoaringBitmap</code> from a byte slice, interpreting …\nCreate the set from a sorted iterator. Values must be …\nCreates a full <code>RoaringBitmap</code>.\nAdds a value to the set.\nInserts a range of values. Returns the number of inserted …\nComputes the len of the intersection with the specified …\nComputes the intersection between a materialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterator over values within a range stored in the …\nReturns true if the set has no elements in common with …\nReturns <code>true</code> if there are no integers in this set.\nReturns <code>true</code> if there are every possible integers in this …\nReturns <code>true</code> if this set is a subset of <code>other</code>.\nReturns <code>true</code> if this set is a superset of <code>other</code>.\nIterator over each value stored in the RoaringBitmap, …\nReturns the number of distinct integers added to the set.\nReturns the maximum value in the set (if the set is …\nMaximum value stored in the bitmap\nReturns the minimum value in the set (if the set is …\nMinimum value stored in the bitmap\nNumber of array containers in the bitmap\nNumber of bitset containers in the bitmap\nNumber of bytes used by array containers\nNumber of bytes used by bitset containers\nNumber of bytes used by run containers\nNumber of containers in the bitmap\nNumber of run containers in the bitmap\nNumber of values stored in array containers\nNumber of values stored in bitset containers\nNumber of values stored in run containers\nCreates an empty <code>RoaringBitmap</code>.\nPushes <code>value</code> in the bitmap only if it is greater than the …\nIterator over values within a range stored in the …\nReturns the number of elements in this set which are in …\nReturns the number of integers that are &lt;= value. …\nRemoves a value from the set. Returns <code>true</code> if the value …\nRemoves the <code>n</code> biggests values from this bitmap.\nRemoves a range of values. Returns the number of removed …\nRemoves the <code>n</code> smallests values from this bitmap.\nReturns the <code>n</code>th integer in the set or <code>None</code> if <code>n &gt;= len()</code>\nSerialize this bitmap into the standard Roaring on-disk …\nReturn the size in bytes of the serialized output. This is …\nReturns statistics about the composition of a roaring …\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nComputes the len of the symmetric difference with the …\nComputes the len of the union with the specified other …\nAn iterator of <code>RoaringBitmap</code>s for <code>RoaringTreemap</code>.\nAn iterator for <code>RoaringTreemap</code>.\nAn iterator for <code>RoaringTreemap</code>.\nA compressed bitmap with u64 values. Implemented as a …\nAdvance the back of the iterator to the first position …\nAdvance the iterator to the first position where the item …\nExtend the set with a sorted iterator.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nAn <code>intersection</code> between two sets.\nIterator over pairs of partition number and the …\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nAn <code>union</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nA <code>symmetric difference</code> between two sets.\nClears all integers in this set.\nReturns <code>true</code> if this set contains the specified integer.\nDeserialize a bitmap into memory.\nDeserialize a bitmap into memory.\nComputes the len of the difference with the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a RoaringTreemap from an iterator of partition …\nCreate the set from a sorted iterator. Values must be …\nCreates a full <code>RoaringTreemap</code>.\nAdds a value to the set. Returns <code>true</code> if the value was not …\nInserts a range of values.\nComputes the len of the intersection with the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the set has no elements in common with …\nReturns <code>true</code> if there are no integers in this set.\nReturns <code>true</code> if there are every possible integers in this …\nReturns <code>true</code> if this set is a subset of <code>other</code>.\nReturns <code>true</code> if this set is a superset of <code>other</code>.\nIterator over each value stored in the RoaringTreemap, …\nReturns the number of distinct integers added to the set.\nReturns the maximum value in the set (if the set is …\nReturns the minimum value in the set (if the set is …\nCreates an empty <code>RoaringTreemap</code>.\nPushes <code>value</code> in the treemap only if it is greater than the …\nReturns the number of integers that are &lt;= value. …\nRemoves a value from the set. Returns <code>true</code> if the value …\nRemoves a range of values. Returns the number of removed …\nReturns the <code>n</code>th integer in the set or <code>None</code> if <code>n &gt;= len()</code>\nSerialize this bitmap. This is compatible with the …\nReturn the size in bytes of the serialized output. This is …\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nA <code>difference</code> between two sets.\nComputes the len of the symmetric difference with the …\nComputes the len of the union with the specified other …")