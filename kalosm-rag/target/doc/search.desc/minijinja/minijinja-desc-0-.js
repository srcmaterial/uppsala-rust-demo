searchState.loadedDescShard("minijinja", 0, "MiniJinja is a powerful but minimal dependency template …\nControls the autoescaping behavior.\nA bad escape sequence in a string was encountered.\nAn error happened in an include.\nNot able to serialize this value.\nNot able to deserialize this value.\nUnable to unpack a value.\nLike <code>Lenient</code>, but also allows chaining of undefined …\nA custom auto escape format.\nAn abstraction that holds the engine configuration.\nRepresents template errors.\nAn enum describing the error kind.\nAn error happened in a super block.\nA handle to a compiled expression.\nUse HTML auto escaping rules.\nHelper to HTML escape a string.\nAn invalid operation was attempted.\nUse escaping rules suitable for JSON/JavaScript or YAML.\nThe default, somewhat lenient undefined behavior.\nA expected argument was missing\nA value is not valid for a key in a map.\nA non primitive value was encountered where one was …\nDo not apply auto escaping.\nAn abstraction over <code>fmt::Write</code> for the rendering.\nLike strict, but does not error when the undefined is …\nProvides access to the current execution state of the …\nComplains very quickly about undefined values.\nThe template has a syntax error\nRepresents a handle to a template.\nA template was not found.\nToo many arguments were passed to a function.\nDefines the behavior of undefined values in the engine.\nAn operation on an undefined value was attempted.\nAn unknown block was called\nA filter is unknown\nA function is unknown\nUn unknown method was called\nA test is unknown\nRe-export for convenience.\nFailed writing output.\nAdds a new filter function.\nAdds a new global function.\nAdds a global variable.\nLoads a template from a string into the environment.\nAdds a template without borrowing.\nAdds a new test function.\nInvokes a filter with some arguments.\nAn utility macro to create arguments for function calls.\nReturns the current value of the auto escape flag.\nLooks up a global macro and calls it.\nRemoves all stored templates.\nCompiles an expression.\nCompiles an expression without capturing the lifetime.\nCreates a template context from keys and values or merging …\nReturns the name of the innermost block.\nReturns the current value of the debug flag.\nThe default logic for auto escaping based on file …\nReturns the error detail\nHelper function that renders all known debug info on …\nCreates a completely empty environment.\nReturns an empty <code>State</code> for testing purposes and similar.\nReturns a reference to the current environment.\nThe default formatter.\nEvaluates the expression with some context.\nEvaluates the template into a <code>State</code>.\nReturns a list of the names of all exports (top-level …\nFilter functions and abstractions.\nFormats a value to a string using the formatter on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal functions and abstractions.\nShortcut for registering an object as a temp.\nLooks up a temp and returns it.\nFetches a template by name with path joining.\nFetches a template by name.\nReturns an iterator of all global variables.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of the trailing newline preservation …\nReturns the error kind\nReturns a list of all known variables.\nReturns the line number where the error occurred.\nLooks up a variable by name in the context.\nReturns the value of the lstrip blocks flag.\nReturns the filename of the template that caused the error.\nReturns the name of the current template.\nReturns the name of the template.\nCreates a new error with kind and detail.\nCreates a new environment with sensible defaults.\nCreates an empty <code>State</code> for this template.\nHelper to load templates from a given directory.\nInvokes a test function on a value.\nReturns the byte range of where the error occurred if …\nReturns the current max recursion limit.\nRemoves a filter by name.\nRemoves a global function or variable by name.\nRemoves a template by name.\nRemoves a test by name.\nRenders the template into a string.\nA macro similar to <code>format!</code> but that uses MiniJinja for …\nLike <code>render</code> but also return the evaluated <code>State</code>.\nRenders a block with the given name into a string.\nRenders a block with the given name into an <code>io::Write</code>.\nParses and renders a template from a string in one go with …\nParses and renders a template from a string in one go.\nRenders the template into an <code>io::Write</code>.\nSets a new function to select the default auto escaping.\nEnable or disable the debug mode.\nSets a different formatter function.\nPreserve the trailing newline when rendering templates.\nRegister a template loader as source of templates.\nRemove leading spaces and tabs from the start of a line to …\nSets a callback to join template paths.\nReconfigures the runtime recursion limit.\nInserts a temp and returns the old temp.\nRemove the first newline after a block.\nChanges the undefined behavior.\nSets a callback invoked for unknown methods on objects.\nReturns the source code of the template.\nDocuments the syntax for templates.\nLoads a template from a string.\nLoads a template from a string, with name <code>&lt;string&gt;</code>.\nReturns the template source if available.\nReturns an iterator over the already loaded templates and …\nTest functions and abstractions.\nReturns the value of the trim blocks flag.\nReturns a set of all undeclared variables in the …\nReturns a set of all undeclared variables in the template.\nReturns the current undefined behavior.\nReturns the current undefined behavior.\nProvides a dynamic value type abstraction.\nAttaches another error as source to this error.\nWrites some formatted information into this instance.\nWrites some data to the underlying buffer contained within …\nReturns the absolute value of a number.\nLooks up an attribute.\nBatch items.\nConverts the value into a boolean value.\nConvert the string with all its characters lowercased …\nIf the value is undefined it will return the passed …\nDict sorting functionality.\nEscapes a string.  By default to HTML.\nReturns the first item from an iterable.\nConverts a value into a float.\nGroup a sequence of objects by an attribute.\nIndents Value with spaces\nConverts a value into an integer.\nReturns an iterable of pairs (items) from a mapping.\nJoins a sequence by a character\nReturns the last item from an iterable.\nReturns the “length” of the value\nSplits a string into lines.\nConverts the input value into a list.\nConverts a value to lowercase.\nApplies a filter to a sequence of objects or looks up an …\nReturns the largest item from an iterable.\nReturns the smallest item from an iterable.\nPretty print a variable.\nCreates a new sequence of values that don’t pass a test.\nCreates a new sequence of values of which an attribute …\nDoes a string replace.\nReverses an iterable or string\nRound the number to a given precision.\nMarks a value as safe.  This converts it into a string.\nCreates a new sequence of values that pass a test.\nCreates a new sequence of values of which an attribute …\nSlice an iterable and return a list of lists containing …\nReturns the sorted version of the given list.\nSplit a string into its substrings, using <code>split</code> as the …\nConverts a value into a string if it’s not one already.\nSums up all the values in a sequence.\nConverts a value to title case.\nDumps a value to JSON.\nTrims a value\nReturns a list of unique items from the given iterable.\nConverts a value to uppercase.\nA utility trait that represents global functions.\nOutputs the current context or the arguments stringified.\nCreates a dictionary.\nCreates a new container that allows attribute assignment …\nReturns a range.\nThe default delimiter configuration for the environment …\nReturns the block delimiters.\nReturns the comment delimiters.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the line comment prefix.\nReturns the line statement prefix.\nReturns the variable delimiters.\nReturn true if the object is a boolean value.\nChecks if a value is defined.\nReturn true if the value is divisible by another one.\nChecks if the value is ending with a string.\nTest version of <code>==</code>.\nChecks if a value is even.\nChecks if a value is <code>false</code>.\nChecks if a filter with a given name is available.\nChecks if this value is a float\nTest version of <code>&gt;=</code>.\nTest version of <code>&gt;</code>.\nTest version of <code>in</code>.\nChecks if this value is an integer.\nChecks if this value can be iterated over.\nTest version of <code>&lt;=</code>.\nChecks if a string is all lowercase.\nTest version of <code>&lt;</code>.\nChecks if this value is a mapping\nTest version of <code>!=</code>.\nChecks if a value is none.\nChecks if this value is a number.\nChecks if a value is odd.\nChecks if a value is safe.\nChecks if two values are identical.\nChecks if this value is a sequence\nChecks if the value is starting with a string.\nChecks if this value is a string.\nChecks if a test with a given name is available.\nChecks if a value is <code>true</code>.\nChecks if a value is undefined.\nChecks if a string is all uppercase.\nA trait implemented by all filter/test argument types.\nThe value is a <code>bool</code>\nThe value is a byte array.\nType-erased version of <code>Object</code>\nThe empty enumerator.  It yields no elements.\nEnumerators help define iteration behavior for <code>Object</code>s.\nHelper trait representing valid filter, test and function …\nA utility trait that represents the return value of …\nThis value is invalid (holds an error).\nA dynamic iterator over values.\nRepresents a non indexable, iterable object.\nAn iterable\nUtility to accept keyword arguments.\nRepresents a map or object.\nThe value is a key/value mapping.\nMarks non enumerable objects.\nThe value is the none singleton (<code>()</code>)\nThe value is a number of a supported type.\nA trait that represents a dynamic object.\nProvides utility methods for working with objects.\nDefines the natural representation of this object.\nThe output type of the function arguments.\nThe output type of this argument.\nAn object that has no reasonable representation.\nA plain object without specific behavior.\nUtility type to capture remaining arguments.\nLike <code>Iter</code> but supports efficient reversing.\nIndicates sequential iteration.\nRepresents a sequence (eg: array/list).\nThe value is an array of other values.\nA slice of static strings.\nThe value is a string.\nThe undefined value.\nThe value is undefined\nRepresents a dynamically typed value in the template …\nUtility to iterate over values.\nDescribes the kind of value.\nA vector of known values to iterate over.\nUtility type to deserialize an argument.\nIterates over all passed keyword arguments.\nReturns the bytes of this value if they exist.\nIf this is an i64 return it\nIf the value is an object a reference to it is returned.\nIf the value is a string, return it.\nIf this is an usize return it\nAsserts that all kwargs were used.\nThe engine calls this to invoke the object itself.\nThe engine calls this to invoke the object itself.\nCalls <code>Object::call</code> of the underlying boxed value.\nCalls the value directly.\nThe engine calls this to invoke a method on the object.\nThe engine calls this to invoke a method on the object.\nCalls <code>Object::call_method</code> of the underlying boxed value.\nCalls a method on the value.\nCustom comparison of this object against another object of …\nCustom comparison of this object against another object of …\nCalls <code>Object::custom_cmp</code> of the underlying boxed value.\nDowncast to <code>T</code> if the boxed value holds a <code>T</code>.\nLike <code>downcast_object_ref</code> but returns the actual object.\nReturns some reference to the boxed object if it is of …\nDowncast to <code>T</code> if the boxed value holds a <code>T</code>.\nEnumerates the object.\nEnumerates the object.\nCalls <code>Object::enumerate</code> of the underlying boxed value.\nReturns the length of the enumerator.\nReturns the length of the enumerator.\nCalls <code>Object::enumerator_len</code> of the underlying boxed value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtility function to convert a slice of values into …\nCreates a value from a byte vector.\nLike <code>from_object</code> but for type erased dynamic objects.\nCreates a callable value from a function.\nCreates a value from a dynamic object.\nCreates a value from a safe string.\nCreates a value from something that can be serialized.\nGets a single argument from the kwargs and marks it as …\nLooks up an attribute by attribute name.\nLooks up an item (or attribute) by key.\nLooks up an index of the value.\nGiven a key, looks up the associated value.\nGiven a key, looks up the associated value.\nCalls <code>Object::get_value</code> of the underlying boxed value.\nChecks if a keyword argument exists.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the boxed value is a <code>T</code>.\nReturns true if the number is a real integer.\nReturns <code>true</code> if the map represents keyword arguments.\nReturns <code>true</code> if this value is none.\nReturns <code>true</code> if the value is a number.\nReturns <code>true</code> if this value is safe.\nReturns <code>true</code> if this object is considered true for if …\nReturns <code>true</code> if this object is considered true for if …\nCalls <code>Object::is_true</code> of the underlying boxed value.\nIs this value considered true?\nReturns <code>true</code> if this value is undefined.\nReturns the kind of the value.\nReturns the length of the contained value.\nCreates a value that is an iterable.\nCreates an iterable that iterates over the given value.\nCreates an object projection onto a map.\nCreates a value from a one-shot iterator.\nCreates a new iterator enumeration that projects into the …\nCreates a new iterator enumeration that projects into the …\nCreates a new reversible iterator enumeration that …\nCreates a new reversible iterator enumeration that …\nUtility function to merge multiple maps into a single one.\nReturns a new boxed, type-erased <code>Object</code>.\nGet a single argument from the kwargs but don’t mark it …\nFormats the object for stringification.\nFormats the object for stringification.\nCalls <code>Object::render</code> of the underlying boxed value.\nIndicates the natural representation of an object.\nIndicates the natural representation of an object.\nCalls <code>Object::repr</code> of the underlying boxed value.\nReturns a reversed view of this value.\nFunction that returns true when serialization for <code>Value</code> is …\nIf the value is a string, return it.\nIterates over this object.\nIterates over this object.\nIterates over this object.\nIterates over the value.\nIterate over key and value at once.\nIterate over key and value at once.\nIterate over key and value at once.\nReturns the type name of the concrete underlying type.")