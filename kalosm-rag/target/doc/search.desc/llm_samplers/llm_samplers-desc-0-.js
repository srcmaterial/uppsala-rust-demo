searchState.loadedDescShard("llm_samplers", 0, "LLM Samplers\nConfiguring sampler options This module implements …\nConvenient rexports. The simplest way to use the crate is …\nSamplers live here!\nTypes and traits.\nThe supplied key can match multiple options.\nBoolean value.\nMutable reference to a boolean value.\nBoolean value.\nThe option value cannot be accessed as requested.\nA chain of samplers.\nNumeric values that can be used for configuring samplers.\nConfigurable samplers implement this trait. “Configurable…\nSampler option handling errors.\nAn error occurred converting the option value.\nSigned float value.\nMutable reference to a signed float value.\nSigned float value.\nConfigurable samplers will need to implement this trait. …\nStructure that defines a sampler’s metadata.\nStructure that defines a sampler option.\nSampler option types.\nEnum that holds the value for a sampler option.\nEnum that holds a mutable reference to a sampler option …\nA single optional sampler.\nStatic slot holding a sampler that stays constant.\nString value.\nMutable reference to a string value.\nString value.\nUnsigned integer value.\nMutable reference to an unsigned integer value.\nUnsigned integer value.\nUnknown option key or incorrect type specified.\nConvenience function to build options from two iterators of\nSince Rust traits don’t allow calling base default …\nUpdates a sampler’s configurable options based on a …\nUpdates a sampler’s configurable options based on a …\nUpdates a sampler’s configurable options based on a …\nOptional option name.\nFor optional samplers (chain, single), this function will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an option by name.\nGets an option by name.\nGets an option by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOption name.\nThe type of option.\nTry to parse a string reference to an option value.\nCalled before an option is set is passed an index into the …\nCalled before an option is set is passed an index into the …\nCalled before an option is set is passed an index into the …\nCalled before an option is set and is passed a mutable …\nCalled before an option is set and is passed a mutable …\nCalled before an option is set and is passed a mutable …\nGiven an option key and SamplerOptionValue attempts to set …\nGiven an option key and SamplerOptionValue attempts to set …\nGiven an option key and SamplerOptionValue attempts to set …\nThe supplied key can match multiple options.\nThe option value cannot be accessed as requested.\nConfigurable samplers implement this trait. “Configurable…\nSampler option handling errors.\nAn error occurred converting the option value.\nTrait for providing resources to samplers.\nGeneral internal error type.\nGeneral internal error type.\nContains the position (AKA token id) of the offending …\nType for logits.\nAn individual logit with some additional metadata for use …\nA collection of Logits. You normally will need to build …\nLogit errors\nContainer for errors that occured while processing logits.\nMissing resource error type.\nEmpty resource structure for use with samplers that don’…\nRNG-related errors\nRNG weights-related errors\nFlat bias sampling\nPresence and frequency penalty sampling\nGreedy sampling\nLocally typical sampling\nMin-P sampling\nMirostat V1 sampling\nMirostat V2 sampling\nRandom distribution sampling\nRepetition penalty sampling\nSequence Repetition\nTail free sampling\nTemperature sampling\nTop-A sampling\nTop-K sampling\nTop-P sampling\nThe main sampler trait.\nA list of Samplers that can be run in sequence. It …\nSampler errors\nSimple resources that can provide an RNG and/or last …\nType for token IDs.\nUnknown option key or incorrect type specified.\nThe logit value.\nComputed probability.\nRuns the Sampler. Depending on the type of Sampler, this …\nThe token id.\nFlat bias sampling\nPresence and frequency penalty sampling\nGreedy sampling\nLocally typical sampling\nMin-P sampling\nMirostat V1 sampling\nMirostat V2 sampling\nRandom distribution sampling\nRepetition penalty sampling\nSequence Repetition\nTail free sampling\nTemperature sampling\nTop-A sampling\nTop-K sampling\nTop-P sampling\nFlat bias sampling\nPresence and frequency penalty sampling\nGreedy sampling\nLocally typical sampling\nMin-P sampling\nMirostat V1 sampling\nMirostat V2 sampling\nRandom distribution sampling\nRepetition penalty sampling\nSequence Repetition\nTail free sampling\nTemperature sampling\nTop-A sampling\nTop-K sampling\nTop-P sampling\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlat bias sampling\nConstruct the sampler from from anything that implements …\nPresence and frequency penalty sampling\nGreedy sampling\nLocally typical sampling\nMin-P sampling\nMirostat V1 sampling\nMirostat V2 sampling\nNote: Setting tau will automatically set mu to <code>tau * 2</code>. If …\nNote: Setting tau will automatically set mu to <code>tau * 2</code>. If …\nRandom distribution sampling\nRepetition penalty sampling\nSequence Repetition\nTail free sampling\nTemperature sampling\nTop-A sampling\nTop-K sampling\nTop-P sampling\nTrait for providing resources to samplers.\nGeneral internal error type.\nGeneral internal error type.\nContains the position (AKA token id) of the offending …\nType for logits.\nAn individual logit with some additional metadata for use …\nA collection of Logits. You normally will need to build …\nLogit errors\nContainer for errors that occured while processing logits.\nMissing resource error type.\nEmpty resource structure for use with samplers that don’…\nRNG-related errors\nRNG weights-related errors\nThe main sampler trait.\nA list of Samplers that can be run in sequence. It …\nSampler errors\nSimple resources that can provide an RNG and/or last …\nType for token IDs.\nEnsure the softmax function has been applied to the Logits.\nEnsure the Logits are sorted. Generally not necessary to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the softmax flag.\nGet the sorted flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logit value.\nComputed probability.\nRuns the Sampler. Depending on the type of Sampler, this …\nConvenience method\nRun the sampler and return the last sampled token id if …\nRun the sampler and return the last sampled token id if …\nConvenience method\nReturns the last sampled token id if available.\nReturns the last sampled token id if available.\nSet the softmax flag.\nSet the sorted flag.\nThe token id.\nMake a new Logits from an iterator of <code>L</code>. We’d like to …\nMake a new Logits from an iterator of <code>L</code> while only keeping …\nAllows a sampler to immutably access the last tokens (if …\nAllows a sampler to immutably access the last tokens (if …\nAllows a sampler to immutably access the last tokens (if …\nAllows a sampler to mutably access the last tokens (if …\nAllows a sampler to mutably access the last tokens (if …\nAllows a sampler to mutably access the last tokens (if …\nAllows a sampler to mutably access the RNG (if present).\nAllows a sampler to mutably access the RNG (if present).\nAllows a sampler to mutably access the RNG (if present).")