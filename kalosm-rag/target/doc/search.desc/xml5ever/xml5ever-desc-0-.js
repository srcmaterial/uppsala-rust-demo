searchState.loadedDescShard("xml5ever", 0, "This crate provides a push based XML parser library that …\nA tag attribute, e.g. <code>class=&quot;test&quot;</code> in …\nAn expanded name, containing the tag and the namespace.\nA fully qualified name (with a namespace), used to depict …\nRepresents a set of “small characters”, those with …\nThe <code>BufferQueue</code> struct and helper types.\nData that is known at compile-time and hard-coded into the …\nDriver\nTake a reference of <code>self</code> as an <code>ExpandedName</code>, dropping the …\nHelper to quickly create an expanded name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTypes for tag and attribute names, and tree-builder …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe local name (e.g. <code>table</code> in <code>&lt;furn:table&gt;</code> above).\nTakes a local name as a string and returns its key in the …\nThe name of the attribute (e.g. the <code>class</code> in …\nTakes a namespace prefix string and returns its key in a …\nTakes a namespace url string and returns its key in a …\nBasic constructor function.\nCount the number of bytes of characters at the beginning …\nThe namespace after resolution (e.g. <code>https://furniture.rs</code> …\nMaps the input of <code>namespace_prefix!</code> to the output of …\nThe prefix of qualified (e.g. <code>furn</code> in <code>&lt;furn:table&gt;</code> above). …\nSerializer for XML5.\nCreate a <code>SmallCharSet</code>, with each space-separated number …\nThis module contains a single struct <code>SmallCharSet</code>. See its …\nXML5 tokenizer - converts input into tokens\nXML5 tree builder - converts tokens into a tree like …\nThe value of the attribute (e.g. the <code>&quot;test&quot;</code> in …\nA queue of owned string buffers, which supports …\nA character from the <code>SmallCharSet</code>.\nA string buffer containing no characters from the …\nResult from <code>pop_except_from</code> containing either a character …\nConsume bytes matching the pattern, using a custom …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the queue is empty.\nCreate an empty BufferQueue.\nGet the next character if one is available, removing it …\nLook at the next available character without removing it, …\nPops and returns either a single character from the given …\nGet the buffer at the beginning of the queue.\nAdd a buffer to the end of the queue.\nAdd a buffer to the beginning of the queue.\nThe spec replaces most characters in the ISO-2022 C1 …\nA map of entity names to their codepoints. The second …\nAll-encompasing parser setting structure.\nAn XML parser, ready to receive Unicode input through the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrap this parser into a <code>TendrilSink</code> that accepts UTF-8 …\nInput used by XmlParser.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse and send results to a <code>TreeSink</code>.\nTokenizer used by XmlParser.\nXml tokenizer options.\nXml tree builder .\nA tag attribute, e.g. <code>class=&quot;test&quot;</code> in …\nContinue without interruptions.\nSpecial properties of an element, useful for tagging …\nAn expanded name, containing the tag and the namespace.\n<code>Handle</code> is a reference to a DOM node.  The tree builder …\nAlmost standards mode\nWhether to interrupt further parsing of the current input …\nStandards mode\nSomething which can be inserted into the DOM.\nThe overall result of parsing.\nA fully qualified name (with a namespace), used to depict …\nFull quirks mode\nA document’s quirks mode, for compatibility with old …\nStop further parsing.\nTrace hooks for a garbage-collected DOM.\nMethods a parser can use to create the DOM. The DOM …\nAdd each attribute to the given element, if no attribute …\nAppend a node as the last child of the given node.  If …\nWhen the insertion point is decided by the existence of a …\nAppend a node as the sibling immediately before the given …\nAppend a <code>DOCTYPE</code> element to the <code>Document</code> node.\nCreate a comment node.\nA constructor for an element.\nCreate an element.\nCreate a Processing Instruction node.\nWhat is the name of this element?\nConsume this sink and return the overall result of parsing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a handle to the <code>Document</code> node.\nGet a handle to a template’s template contents. The tree …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe local name (e.g. <code>table</code> in <code>&lt;furn:table&gt;</code> above).\nThis boolean should be recorded with the element and …\nThe name of the attribute (e.g. the <code>class</code> in …\nThe namespace after resolution (e.g. <code>https://furniture.rs</code> …\nSignal a parse error.\nThe prefix of qualified (e.g. <code>furn</code> in <code>&lt;furn:table&gt;</code> above). …\nDetach the given node from its parent.\nRemove all the children from node and append them to …\nDo two handles refer to the same node?\nSet the document’s quirks mode.\nA document fragment should be created, associated with the …\nUpon a call to <code>trace_handles</code>, the tree builder will call …\nThis module contains functionality for managing the DOM, …\nThe value of the attribute (e.g. the <code>&quot;test&quot;</code> in …\nContinue without interruptions.\nSpecial properties of an element, useful for tagging …\n<code>Handle</code> is a reference to a DOM node.  The tree builder …\nAlmost standards mode\nWhether to interrupt further parsing of the current input …\nStandards mode\nSomething which can be inserted into the DOM.\nThe overall result of parsing.\nFull quirks mode\nA document’s quirks mode, for compatibility with old …\nStop further parsing.\nTrace hooks for a garbage-collected DOM.\nMethods a parser can use to create the DOM. The DOM …\nAdd each attribute to the given element, if no attribute …\nAppend a node as the last child of the given node.  If …\nWhen the insertion point is decided by the existence of a …\nAppend a node as the sibling immediately before the given …\nAppend a <code>DOCTYPE</code> element to the <code>Document</code> node.\nCreate a comment node.\nA constructor for an element.\nCreate an element.\nCreate a Processing Instruction node.\nWhat is the name of this element?\nConsume this sink and return the overall result of parsing.\nGet a handle to the <code>Document</code> node.\nGet a handle to a template’s template contents. The tree …\nThis boolean should be recorded with the element and …\nSignal a parse error.\nDetach the given node from its parent.\nRemove all the children from node and append them to …\nDo two handles refer to the same node?\nSet the document’s quirks mode.\nA document fragment should be created, associated with the …\nUpon a call to <code>trace_handles</code>, the tree builder will call …\nA type alias for an attribute name and value (e.g. the …\nOnly serialize the children of the node, treating any …\nInclude the parent node when serializing.\nTypes that can be serialized (according to the xml-like …\nStruct for setting serializer options.\nTypes that are capable of serializing implement this trait\nUsed as a parameter to <code>serialize</code>, telling it if we want to …\nStruct used for serializing nodes into a text that other …\nSerialize the end of an element, for example <code>&lt;/div&gt;</code>.\nSerializes given end element into text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Serializier from a writer and given …\nMethod for serializing generic node to a given writer.\nTake the serializer and call its methods to serialize this …\nSerialize the start of an element, for example …\nSerializes given start element into text. Start element …\nSerialize the root node? Default: ChildrenOnly\nSerialize a comment node, for example <code>&lt;!-- comment --&gt;</code>.\nSerializes comment into text.\nSerialize a doctype node, for example <code>&lt;!doctype html&gt;</code>.\nSerializes given doctype\nSerialize a processing instruction node, for example …\nSerializes given processing instruction.\nSerialize a plain text node.\nSerializes text for a node or an attributes.\nRepresents a set of “small characters”, those with …\nA marker of an atomic (and hence concurrent) tendril.\nThe multithreadedness of a tendril.\n<code>Tendril</code> for storing binary data.\nTrait for format marker types.\nA marker of a non-atomic tendril.\nWhat the overall result of processing is.\nExtension trait for <code>io::Read</code>.\nA simple wrapper to make <code>Tendril</code> <code>Send</code>.\n<code>Tendril</code>-related methods for Rust slices.\n<code>Tendril</code> for storing native Rust strings.\nErrors that can occur when slicing a <code>Tendril</code>.\nCompact string type for zero-copy parsing.\nTrait for types that can process a tendril.\nView as uninterpreted bytes.\nView as a superset format, for free.\nTruncate to length 0 without discarding any owned storage.\nIndicates that an error has occurred.\nIndicates the end of the stream.\nCompute any fixup needed when concatenating buffers.\nMarker types for formats.\nHelper for the <code>format_tendril!</code> macro.\nCreate a <code>StrTendril</code> through string formatting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a <code>Tendril</code> by copying a byte slice, without …\nCreate a <code>Tendril</code> from a single character.\nRead from the file at the given path and process …\nConsume an iterator of tendrils, processing each item, …\nBuild a <code>Tendril</code> by copying a slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into uninterpreted bytes.\nConvert <code>self</code> into a type which is <code>Send</code>.\nConvert into a superset format, for free.\nIs the backing buffer shared?\nIs the backing buffer shared with this other <code>Tendril</code>?\nGet the length of the <code>Tendril</code>.\nCreate a new, empty <code>Tendril</code> in any format.\nProcess one tendril and finish.\nDrop <code>n</code> bytes from the back.\nDrop <code>n</code> bytes from the front.\nRemove and return the first character, if any.\nRemove and return a run of characters at the front of the …\nProcess this tendril.\nPush some bytes onto the end of the <code>Tendril</code>, without …\nPush a character onto the end.\nPush a slice onto the end of the <code>Tendril</code>.\nPush another <code>Tendril</code> onto the end of this one.\nPush “uninitialized bytes” onto the end.\nRead from the given stream of bytes until exhaustion and …\nView as another format, without validating.\nConvert into another format, without validating.\nReserve space for additional bytes.\nStreams of tendrils.\nSlice this <code>Tendril</code> as a new <code>Tendril</code>.\nMake a <code>Tendril</code> from this slice.\nView as a subset format, if the <code>Tendril</code> conforms to that …\nBuild a <code>Tendril</code> by copying a byte slice, if it conforms to …\nConvert into a subset format, if the <code>Tendril</code> conforms to …\nDrop <code>n</code> bytes from the back.\nTry to drop <code>n</code> bytes from the front.\nPush some bytes onto the end of the <code>Tendril</code>, if they …\nPush a character, if it can be represented in this format.\nConvert into another format, if the <code>Tendril</code> conforms to …\nView as another format, if the bytes of the <code>Tendril</code> are …\nAttempt to slice this <code>Tendril</code> as a new <code>Tendril</code>.\nDrop <code>n</code> bytes from the back.\nDrop <code>n</code> bytes from the front.\nSlice this <code>Tendril</code> as a new <code>Tendril</code>.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCreate a new, empty <code>Tendril</code> with a specified capacity.\nMarker type for ASCII text.\nMarker type for uninterpreted bytes.\nIndicates a format which contains characters from Unicode …\nTrait for format marker types.\nIterator for characters and their byte indices.\nMarker type for the single-byte encoding of the first 256 …\nIndicates a Rust slice type that is represented in memory …\nIndicates a format which corresponds to a Rust slice type, …\nIndicates that one format is a subset of another.\nMarker type for UTF-8 text.\nMarker type for WTF-8 text.\nAccess the raw bytes of the slice.\nIterate over the characters of the string and their byte …\nEncode the character as bytes and pass them to a …\nCompute any fixup needed when concatenating buffers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a byte slice to this kind of slice.\nConvert a byte slice to this kind of slice.\nImplementation details.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate the <em>other</em> direction of conversion; check if this …\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nCheck whether the buffer is valid for this format.\nDescribes how to fix up encodings when concatenating.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat the overall result of processing is.\nTrait for types that can process a tendril.\nA <code>TendrilSink</code> adaptor that takes bytes, decodes them as …\nIndicates that an error has occurred.\nIndicates the end of the stream.\nReturns the argument unchanged.\nRead from the file at the given path and process …\nConsume an iterator of tendrils, processing each item, …\nCalls <code>U::from(self)</code>.\nCreate a new incremental UTF-8 decoder.\nProcess one tendril and finish.\nProcess this tendril.\nRead from the given stream of bytes until exhaustion and …\nToken that represents a series of characters.\nComment token.\nA <code>DOCTYPE</code> token. Doctype token in XML5 is rather limited …\nDoctype token\nEnd of File found.\nEmpty tag (e.g. <code>&lt;a/&gt;</code>).\nEnd of a tag (e.g. <code>&lt;/a&gt;</code>).\nNullCharacter encountered.\nProcessing Instruction token\nError happened\nA ProcessingInstruction token.\nShort tag (e.g. <code>&lt;/&gt;</code>).\nBeginning of a tag (e.g. <code>&lt;a&gt;</code>).\nXML 5 Tag Token\nTag kind denotes which kind of tag did we encounter.\nToken tag founds. This token applies to all possible kinds …\nDescribes tokens encountered during parsing of input.\nTypes which can receive tokens from the tokenizer.\nThe Xml tokenizer.\nCopy of Tokenizer options, with an impl for <code>Default</code>.\nList of attributes attached to this tag. Only valid in …\nText of processing instruction.\nDiscard a <code>U+FEFF BYTE ORDER MARK</code> if we see one at the …\nSignal to the sink that parsing has ended.\nSignal to the sink that parsing has ended.\nIndicate that we have reached the end of the input.\nSorts attributes in a tag.\nReport all parse errors described in the spec, at some …\nFeed an input string into the tokenizer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial state override.  Only the test runner should use a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nToken kind denotes which type of token was encountered. …\nQualified name of the tag.\nName of DOCTYPE declared\nCreate a new tokenizer which feeds tokens to a particular …\nConstructs an empty DOCTYPE, with all fields set to None.\nProcess a token.\nKeep a record of how long we spent in each state?  Printed …\nPublic identifier of this DOCTYPE.\nThe tokenizer will call this after emitting any start tag. …\nThe tokenizer will call this after emitting any start tag. …\nRun the state machine for as long as we can.\nDestination for tokens we emit.\nTokenizer states.\nSystem identifier of this DOCTYPE.\nWhat is the name of processing instruction.\nContinue without interruptions.\n<code>Handle</code> is a reference to a DOM node.  The tree builder …\nWhether to interrupt further parsing of the current input …\nSomething which can be inserted into the DOM.\nThe overall result of parsing.\nStop further parsing.\nTrace hooks for a garbage-collected DOM.\nMethods a parser can use to create the DOM. The DOM …\nThe XML tree builder.\nTree builder options, with an impl for Default.\nAdd each attribute to the given element, if no attribute …\nAppend a node as the last child of the given node.  If …\nWhen the insertion point is decided by the existence of a …\nAppend a node as the sibling immediately before the given …\nAppend a <code>DOCTYPE</code> element to the <code>Document</code> node.\nAssociate the given form-associatable element with the …\nAssociate the given form-associatable element with the …\nAssociate the given form-associatable element with the …\nIndicate that a <code>script</code> element is complete.\nIndicate that a <code>script</code> element is complete.\nIndicate that a <code>script</code> element is complete.\nCreate a comment node.\nCreate an element.\nCreate a Processing Instruction node.\nWhat is the name of this element?\nConsume this sink and return the overall result of parsing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a handle to the <code>Document</code> node.\nGet a handle to a template’s template contents. The tree …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the adjusted current node is an HTML …\nReturns true if the adjusted current node is an HTML …\nReturns true if the adjusted current node is an HTML …\nMark a HTML <code>&lt;script&gt;</code> as “already started”.\nMark a HTML <code>&lt;script&gt;</code> as “already started”.\nMark a HTML <code>&lt;script&gt;</code> as “already started”.\nCreate a new tree builder which sends tree modifications …\nSignal a parse error.\nIndicate that a node was popped off the stack of open …\nIndicate that a node was popped off the stack of open …\nIndicate that a node was popped off the stack of open …\nDetach the given node from its parent.\nRemove all the children from node and append them to …\nDo two handles refer to the same node?\nCalled whenever the line number changes.\nCalled whenever the line number changes.\nCalled whenever the line number changes.\nSet the document’s quirks mode.\nConsumer of tree modifications.\nUpon a call to <code>trace_handles</code>, the tree builder will call …\nCall the <code>Tracer</code>’s <code>trace_handle</code> method on every <code>Handle</code> in …")