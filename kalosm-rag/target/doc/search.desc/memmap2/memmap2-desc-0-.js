searchState.loadedDescShard("memmap2", 0, "A cross-platform Rust API for memory mapped buffers.\nValues supported by <code>Mmap::advise</code> and <code>MmapMut::advise</code> …\n<strong>MADV_DONTNEED</strong>\n<strong>MADV_FREE</strong> - Linux (since Linux 4.5) and Darwin\n<strong>MADV_FREE_REUSABLE</strong> - Darwin only\n<strong>MADV_FREE_REUSE</strong> - Darwin only\nA handle to an immutable memory mapped buffer.\nA handle to a mutable memory mapped buffer.\nA memory map builder, providing advanced options and flags …\nA handle to a raw memory mapped buffer.\n<strong>MADV_NORMAL</strong>\n<strong>MADV_RANDOM</strong>\n<strong>MADV_SEQUENTIAL</strong>\nValues supported by [<code>Mmap::unsafe_advise</code>][…\n<strong>MADV_WILLNEED</strong>\n<strong>MADV_ZERO_WIRED_PAGES</strong> - Darwin only\nAdvise OS how this memory map will be accessed.\nAdvise OS how this memory map will be accessed.\nAdvise OS how this memory map will be accessed.\nAdvise OS how this range of memory map will be accessed.\nAdvise OS how this range of memory map will be accessed.\nAdvise OS how this range of memory map will be accessed.\nReturns an unsafe mutable pointer to the memory mapped …\nReturns a raw pointer to the memory mapped file.\nFlushes outstanding memory map modifications to disk.\nFlushes outstanding memory map modifications to disk.\nAsynchronously flushes outstanding memory map …\nAsynchronously flushes outstanding memory map …\nAsynchronously flushes outstanding memory map …\nAsynchronously flushes outstanding memory map …\nFlushes outstanding memory map modifications in the range …\nFlushes outstanding memory map modifications in the range …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigures the anonymous memory map to be allocated using …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length in bytes of the memory map.\nConfigures the created memory mapped buffer to be <code>len</code> …\nLock the whole memory map into RAM. Only supported on Unix.\nLock the whole memory map into RAM. Only supported on Unix.\nLock the whole memory map into RAM. Only supported on Unix.\nTransition the memory map to be readable and executable.\nTransition the memory map to be writable.\nReturns an immutable version of this memory mapped buffer.\nCreates a read-only memory map backed by a file.\nCreates a read-only memory map backed by a file.\nCreates an anonymous memory map.\nCreates an anonymous memory map.\nCreates a copy-on-write memory map backed by a file.\nCreates a copy-on-write read-only memory map backed by a …\nCreates a readable and executable memory map backed by a …\nCreates a writeable memory map backed by a file.\nCreates a writeable memory map backed by a file.\nCreates a writeable memory map backed by a file.\nCreates a raw memory map.\nCreates a read-only raw memory map\nCreates a new set of options for configuring and creating …\nConfigures the memory map to start at byte <code>offset</code> from the …\nPopulate (prefault) page tables for a mapping.\nConfigures the anonymous memory map to be suitable for a …\nAdvise OS how this memory map will be accessed.\nAdvise OS how this memory map will be accessed.\nAdvise OS how this memory map will be accessed.\nAdvise OS how this range of memory map will be accessed.\nAdvise OS how this range of memory map will be accessed.\nAdvise OS how this range of memory map will be accessed.\nUnlock the whole memory map. Only supported on Unix.\nUnlock the whole memory map. Only supported on Unix.\nUnlock the whole memory map. Only supported on Unix.")