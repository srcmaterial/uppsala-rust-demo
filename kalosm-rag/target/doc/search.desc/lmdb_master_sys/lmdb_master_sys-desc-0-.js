searchState.loadedDescShard("lmdb_master_sys", 0, "&lt; Position at first key/data item\n&lt; Position at first data item of current key. Only for …\n&lt; Position at key/data pair. Only for #MDB_DUPSORT\n&lt; position at key, nearest data. Only for #MDB_DUPSORT\n&lt; Return key/data at current cursor position\n&lt; Return up to a page of duplicate data items from current …\n&lt; Position at last key/data item\n&lt; Position at last data item of current key. Only for …\n&lt; Position at next data item\n&lt; Position at next data item of current key. Only for …\n&lt; Return up to a page of duplicate data items from next …\n&lt; Position at first data item of next key\n&lt; Position at previous data item\n&lt; Position at previous data item of current key. Only for …\n&lt; Position at previous page and return up to a page of …\n&lt; Position at last data item of previous key\n&lt; Position at specified key\n&lt; Position at specified key, return key + data\n&lt; Position at first key greater than or equal to specified …\nA callback function for most LMDB assert() failures, …\nA callback function used to compare two keys in a database\nCursor Get operations.\nA handle for an individual database in the DB environment.\nInformation about the environment\nA callback function used to print a message from the …\nA callback function used to relocate a position-dependent …\nStatistics for a database in the environment\nGeneric structure used for passing keys and data in and out\nNo value.\nNo value.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompare two data items according to a particular database.\nClose a cursor handle.\nReturn count of duplicates for current key.\nReturn the cursor’s database handle.\nDelete current key/data pair\nRetrieve by cursor.\nCreate a cursor handle.\nStore by cursor.\nRenew a cursor handle.\nReturn the cursor’s transaction handle.\nClose a database handle. Normally unnecessary. Use with …\nRetrieve the DB flags for a database handle.\nOpen a database in the environment.\nCompare two data items according to a particular database.\nDelete items from a database.\nEmpty or delete+close a database.\nClose the environment and release the memory map.\nCopy an LMDB environment to the specified path.\nCopy an LMDB environment to the specified path, with …\nCopy an LMDB environment to the specified file descriptor.\nCopy an LMDB environment to the specified file descriptor, …\nCreate an LMDB environment handle.\nReturn the filedescriptor for the given environment.\nGet environment flags.\nGet the maximum size of keys and #MDB_DUPSORT data we can …\nGet the maximum number of threads/reader slots for the …\nReturn the path that was used in #mdb_env_open().\nGet the application information associated with the …\nReturn information about the LMDB environment.\nOpen an environment handle.\nSet or reset the assert() callback of the environment. …\nSet environment flags.\nSet the size of the memory map to use for this environment.\nSet the maximum number of named databases for the …\nSet the maximum number of threads/reader slots for the …\nSet application information associated with the #MDB_env.\nReturn statistics about the LMDB environment.\nFlush the data buffers to disk.\nGet items from a database.\nStore items into a database.\nCheck for stale entries in the reader lock table.\nDump the entries in the reader lock table.\nSet a custom key comparison function for a database.\nSet a custom data comparison function for a #MDB_DUPSORT …\nSet a context pointer for a #MDB_FIXEDMAP database’s …\nSet a relocation function for a #MDB_FIXEDMAP database.\nUnsigned type used for mapsize, entry counts and …\nRetrieve statistics for a database.\nReturn a string describing a given error code.\nAbandon all the operations of the transaction instead of …\nCreate a transaction for use with the environment.\nCommit all the operations of a transaction into the …\nReturns the transaction’s #MDB_env\nReturn the transaction’s ID.\nRenew a read-only transaction.\nReset a read-only transaction.\nReturn the LMDB library version information.\n&lt; ID of the last used page\n&lt; ID of the last committed transaction\n&lt; Address of map, if fixed\n&lt; Size of the data memory map\n&lt; max reader slots in the environment\n&lt; max reader slots used in the environment\n&lt; Number of internal (non-leaf) pages\n&lt; Depth (height) of the B-tree\n&lt; Number of data items\n&lt; Number of leaf pages\n&lt; Number of overflow pages\n&lt; Size of a database page. This is currently the same for …\n&lt; address of the data item\n&lt; size of the data item")