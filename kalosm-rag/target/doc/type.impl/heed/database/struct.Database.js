(function() {
    var type_impls = Object.fromEntries([["arroy",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Database%3CKC,+DC,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2601\">Source</a><a href=\"#impl-Clone-for-Database%3CKC,+DC,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;KC, DC, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC, DC, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2602\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC, DC, C&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","arroy::Database"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Database%3CKC,+DC,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#300\">Source</a><a href=\"#impl-Database%3CKC,+DC,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;KC, DC, C&gt; <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC, DC, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#342-345\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get\" class=\"fn\">get</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves the value associated with a key.</p>\n<p>If the key does not exist, then <code>None</code> is returned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32= U32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;Str, BEI32&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"get-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-two\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(<span class=\"number\">42</span>));\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"string\">\"i-am-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_duplicates\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#421-427\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_duplicates\" class=\"fn\">get_duplicates</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"heed/iterator/iter/struct.RoIter.html\" title=\"struct heed::iterator::iter::RoIter\">RoIter</a>&lt;'txn, KC, DC, <a class=\"enum\" href=\"heed/iteration_method/enum.MoveOnCurrentKeyDuplicates.html\" title=\"enum heed::iteration_method::MoveOnCurrentKeyDuplicates\">MoveOnCurrentKeyDuplicates</a>&gt;&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over all of the values of a single key.</p>\n<p>You can make this iterator <code>Send</code>able between threads by\nusing the <code>read-txn-no-tls</code> crate feature.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI64 = I64&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.database_options()\n    .types::&lt;BEI64, BEI64&gt;()\n    .flags(DatabaseFlags::DUP_SORT)\n    .name(<span class=\"string\">\"dup-sort\"</span>)\n    .create(<span class=\"kw-2\">&amp;mut </span>wtxn)<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">120</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">121</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">122</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">32</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">35</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">120</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">120</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">120</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.get_duplicates(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>)<span class=\"question-mark\">?</span>.expect(<span class=\"string\">\"the key exists\"</span>);\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">120</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">121</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">122</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">123</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\ndrop(iter);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.get_duplicates(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>)<span class=\"question-mark\">?</span>.expect(<span class=\"string\">\"the key exists\"</span>);\n<span class=\"macro\">assert_eq!</span>(iter.last().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">123</span>)));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_lower_than\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#484-491\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_lower_than\" class=\"fn\">get_lower_than</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>, &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>)&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt; + <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves the key/value pair lower than the given one in this database.</p>\n<p>If the database if empty or there is no key lower than the given one,\nthen <code>None</code> is returned.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEU32 = U32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.create_database::&lt;BEU32, Unit&gt;(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"get-lt-u32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">43</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.get_lower_than(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">4404</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">43</span>, ())));\n\n<span class=\"kw\">let </span>ret = db.get_lower_than(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">43</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, ())));\n\n<span class=\"kw\">let </span>ret = db.get_lower_than(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_lower_than_or_equal_to\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#553-560\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_lower_than_or_equal_to\" class=\"fn\">get_lower_than_or_equal_to</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>, &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>)&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt; + <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves the key/value pair lower than or equal to the given one in this database.</p>\n<p>If the database if empty or there is no key lower than or equal to the given one,\nthen <code>None</code> is returned.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEU32 = U32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.create_database::&lt;BEU32, Unit&gt;(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"get-lt-u32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">43</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.get_lower_than_or_equal_to(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">4404</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">43</span>, ())));\n\n<span class=\"kw\">let </span>ret = db.get_lower_than_or_equal_to(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">43</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">43</span>, ())));\n\n<span class=\"kw\">let </span>ret = db.get_lower_than_or_equal_to(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">26</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_greater_than\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#626-633\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_greater_than\" class=\"fn\">get_greater_than</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>, &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>)&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt; + <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves the key/value pair greater than the given one in this database.</p>\n<p>If the database if empty or there is no key greater than the given one,\nthen <code>None</code> is returned.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEU32 = U32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.create_database::&lt;BEU32, Unit&gt;(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"get-lt-u32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">43</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.get_greater_than(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, ())));\n\n<span class=\"kw\">let </span>ret = db.get_greater_than(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">43</span>, ())));\n\n<span class=\"kw\">let </span>ret = db.get_greater_than(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">43</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_greater_than_or_equal_to\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#698-705\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_greater_than_or_equal_to\" class=\"fn\">get_greater_than_or_equal_to</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>, &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>)&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt; + <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves the key/value pair greater than or equal to the given one in this database.</p>\n<p>If the database if empty or there is no key greater than or equal to the given one,\nthen <code>None</code> is returned.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEU32 = U32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.create_database::&lt;BEU32, Unit&gt;(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"get-lt-u32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">43</span>, <span class=\"kw-2\">&amp;</span>())<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.get_greater_than_or_equal_to(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, ())));\n\n<span class=\"kw\">let </span>ret = db.get_greater_than_or_equal_to(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, ())));\n\n<span class=\"kw\">let </span>ret = db.get_greater_than_or_equal_to(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">44</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#757-760\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.first\" class=\"fn\">first</a>&lt;'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>, &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>)&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves the first key/value pair of this database.</p>\n<p>If the database if empty, then <code>None</code> is returned.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"first-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.first(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#811-814\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.last\" class=\"fn\">last</a>&lt;'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>, &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>)&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Retrieves the last key/value pair of this database.</p>\n<p>If the database if empty, then <code>None</code> is returned.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"last-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.last(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#868\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.len\" class=\"fn\">len</a>(&amp;self, txn: &amp;<a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in this database.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.len(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"number\">4</span>);\n\ndb.delete(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.len(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"number\">3</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#911\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self, txn: &amp;<a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if this database is empty.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.is_empty(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"bool-val\">false</span>);\n\ndb.clear(<span class=\"kw-2\">&amp;mut </span>wtxn)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.is_empty(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"bool-val\">true</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stat\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#953\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.stat\" class=\"fn\">stat</a>(&amp;self, txn: &amp;<a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/database/struct.DatabaseStat.html\" title=\"struct heed::database::DatabaseStat\">DatabaseStat</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns some statistics for this database.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>stat = db.stat(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(stat.depth, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(stat.branch_pages, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(stat.leaf_pages, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(stat.overflow_pages, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(stat.entries, <span class=\"number\">4</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1015\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.iter\" class=\"fn\">iter</a>&lt;'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/iter/struct.RoIter.html\" title=\"struct heed::iterator::iter::RoIter\">RoIter</a>&lt;'txn, KC, DC&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a lexicographically ordered iterator of all key-value pairs in this database.</p>\n<p>You can make this iterator <code>Send</code>able between threads by\nusing the <code>read-txn-no-tls</code> crate feature.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.iter(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1070\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>&lt;'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/iter/struct.RwIter.html\" title=\"struct heed::iterator::iter::RwIter\">RwIter</a>&lt;'txn, KC, DC&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a mutable lexicographically ordered iterator of all key-value pairs in this database.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.iter_mut(<span class=\"kw-2\">&amp;mut </span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ iter.del_current()<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ iter.put_current(<span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-the-new-forty-two\"</span>)<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"i-am-the-new-forty-two\"</span>));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rev_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1116\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.rev_iter\" class=\"fn\">rev_iter</a>&lt;'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/iter/struct.RoRevIter.html\" title=\"struct heed::iterator::iter::RoRevIter\">RoRevIter</a>&lt;'txn, KC, DC&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a reversed lexicographically ordered iterator of all key-value pairs in this database.</p>\n<p>You can make this iterator <code>Send</code>able between threads by\nusing the <code>read-txn-no-tls</code> crate feature.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.rev_iter(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rev_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1173\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.rev_iter_mut\" class=\"fn\">rev_iter_mut</a>&lt;'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/iter/struct.RwRevIter.html\" title=\"struct heed::iterator::iter::RwRevIter\">RwRevIter</a>&lt;'txn, KC, DC&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a mutable reversed lexicographically ordered iterator of all key-value<br />\npairs in this database.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.rev_iter_mut(<span class=\"kw-2\">&amp;mut </span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ iter.del_current()<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ iter.put_current(<span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-the-new-thirteen\"</span>)<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"i-am-the-new-thirteen\"</span>));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1222-1229\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.range\" class=\"fn\">range</a>&lt;'a, 'txn, R&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    range: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a R</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/range/struct.RoRange.html\" title=\"struct heed::iterator::range::RoRange\">RoRange</a>&lt;'txn, KC, DC&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Return a lexicographically ordered iterator of a range of key-value pairs in this database.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n<p>You can make this iterator <code>Send</code>able between threads by\nusing the <code>read-txn-no-tls</code> crate feature.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>range = <span class=\"number\">27</span>..=<span class=\"number\">42</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.range(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span>range)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1314-1321\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.range_mut\" class=\"fn\">range_mut</a>&lt;'a, 'txn, R&gt;(\n    &amp;self,\n    txn: &amp;'txn mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    range: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a R</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/range/struct.RwRange.html\" title=\"struct heed::iterator::range::RwRange\">RwRange</a>&lt;'txn, KC, DC&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable lexicographically ordered iterator of a range of\nkey-value pairs in this database.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>range = <span class=\"number\">27</span>..=<span class=\"number\">42</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>range = db.range_mut(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span>range)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(range.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ range.del_current()<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n<span class=\"macro\">assert_eq!</span>(range.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ range.put_current(<span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-the-new-forty-two\"</span>)<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(range.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\ndrop(range);\n\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.iter(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-the-new-forty-two\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rev_range\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1396-1403\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.rev_range\" class=\"fn\">rev_range</a>&lt;'a, 'txn, R&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    range: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a R</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/range/struct.RoRevRange.html\" title=\"struct heed::iterator::range::RoRevRange\">RoRevRange</a>&lt;'txn, KC, DC&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Return a reversed lexicographically ordered iterator of a range of key-value\npairs in this database.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n<p>You can make this iterator <code>Send</code>able between threads by\nusing the <code>read-txn-no-tls</code> crate feature.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>range = <span class=\"number\">27</span>..=<span class=\"number\">43</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.rev_range(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span>range)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rev_range_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1488-1495\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.rev_range_mut\" class=\"fn\">rev_range_mut</a>&lt;'a, 'txn, R&gt;(\n    &amp;self,\n    txn: &amp;'txn mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    range: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a R</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/range/struct.RwRevRange.html\" title=\"struct heed::iterator::range::RwRevRange\">RwRevRange</a>&lt;'txn, KC, DC&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable reversed lexicographically ordered iterator of a range of\nkey-value pairs in this database.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>range = <span class=\"number\">27</span>..=<span class=\"number\">42</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>range = db.rev_range_mut(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span>range)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(range.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ range.del_current()<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n<span class=\"macro\">assert_eq!</span>(range.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ range.put_current(<span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-the-new-twenty-seven\"</span>)<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(range.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\ndrop(range);\n\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.iter(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">27</span>, <span class=\"string\">\"i-am-the-new-twenty-seven\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prefix_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1571-1578\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.prefix_iter\" class=\"fn\">prefix_iter</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    prefix: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/prefix/struct.RoPrefix.html\" title=\"struct heed::iterator::prefix::RoPrefix\">RoPrefix</a>&lt;'txn, KC, DC, C&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    C: <a class=\"trait\" href=\"heed_traits/trait.LexicographicComparator.html\" title=\"trait heed_traits::LexicographicComparator\">LexicographicComparator</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a lexicographically ordered iterator of all key-value pairs\nin this database that starts with the given prefix.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n<p>You can make this iterator <code>Send</code>able between threads by\nusing the <code>read-txn-no-tls</code> crate feature.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;Str, BEI32&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">28</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-nine\"</span>,  <span class=\"kw-2\">&amp;</span><span class=\"number\">29</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-one\"</span>,    <span class=\"kw-2\">&amp;</span><span class=\"number\">41</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-two\"</span>,    <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.prefix_iter(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"number\">28</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-nine\"</span>, <span class=\"number\">29</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"number\">27</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prefix_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1642-1649\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.prefix_iter_mut\" class=\"fn\">prefix_iter_mut</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    prefix: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/prefix/struct.RwPrefix.html\" title=\"struct heed::iterator::prefix::RwPrefix\">RwPrefix</a>&lt;'txn, KC, DC, C&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    C: <a class=\"trait\" href=\"heed_traits/trait.LexicographicComparator.html\" title=\"trait heed_traits::LexicographicComparator\">LexicographicComparator</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable lexicographically ordered iterator of all key-value pairs\nin this database that starts with the given prefix.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;Str, BEI32&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">28</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-nine\"</span>,  <span class=\"kw-2\">&amp;</span><span class=\"number\">29</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-one\"</span>,    <span class=\"kw-2\">&amp;</span><span class=\"number\">41</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-two\"</span>,    <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.prefix_iter_mut(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"number\">28</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ iter.del_current()<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-nine\"</span>, <span class=\"number\">29</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"number\">27</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ iter.put_current(<span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">27000</span>)<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"string\">\"i-am-twenty-eight\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(<span class=\"number\">27000</span>));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rev_prefix_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1703-1710\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.rev_prefix_iter\" class=\"fn\">rev_prefix_iter</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn <a class=\"struct\" href=\"heed/txn/struct.RoTxn.html\" title=\"struct heed::txn::RoTxn\">RoTxn</a>&lt;'_&gt;,\n    prefix: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/prefix/struct.RoRevPrefix.html\" title=\"struct heed::iterator::prefix::RoRevPrefix\">RoRevPrefix</a>&lt;'txn, KC, DC, C&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    C: <a class=\"trait\" href=\"heed_traits/trait.LexicographicComparator.html\" title=\"trait heed_traits::LexicographicComparator\">LexicographicComparator</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a reversed lexicographically ordered iterator of all key-value pairs\nin this database that starts with the given prefix.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n<p>You can make this iterator <code>Send</code>able between threads by\nusing the <code>read-txn-no-tls</code> crate feature.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;Str, BEI32&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">28</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-nine\"</span>,  <span class=\"kw-2\">&amp;</span><span class=\"number\">29</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-one\"</span>,    <span class=\"kw-2\">&amp;</span><span class=\"number\">41</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-two\"</span>,    <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.rev_prefix_iter(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"number\">27</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-nine\"</span>, <span class=\"number\">29</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"number\">28</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rev_prefix_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1774-1781\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.rev_prefix_iter_mut\" class=\"fn\">rev_prefix_iter_mut</a>&lt;'a, 'txn&gt;(\n    &amp;self,\n    txn: &amp;'txn mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    prefix: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"heed/iterator/prefix/struct.RwRevPrefix.html\" title=\"struct heed::iterator::prefix::RwRevPrefix\">RwRevPrefix</a>&lt;'txn, KC, DC, C&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    C: <a class=\"trait\" href=\"heed_traits/trait.LexicographicComparator.html\" title=\"trait heed_traits::LexicographicComparator\">LexicographicComparator</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable reversed lexicographically ordered iterator of all key-value pairs\nin this database that starts with the given prefix.</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;Str, BEI32&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">28</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty-nine\"</span>,  <span class=\"kw-2\">&amp;</span><span class=\"number\">29</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-one\"</span>,    <span class=\"kw-2\">&amp;</span><span class=\"number\">41</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-forty-two\"</span>,    <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.rev_prefix_iter_mut(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"string\">\"i-am-twenty\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-seven\"</span>, <span class=\"number\">27</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ iter.del_current()<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-nine\"</span>, <span class=\"number\">29</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"number\">28</span>)));\n<span class=\"kw\">let </span>ret = <span class=\"kw\">unsafe </span>{ iter.put_current(<span class=\"string\">\"i-am-twenty-eight\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">28000</span>)<span class=\"question-mark\">? </span>};\n<span class=\"macro\">assert!</span>(ret);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"string\">\"i-am-twenty-eight\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(<span class=\"number\">28000</span>));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1825-1828\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.put\" class=\"fn\">put</a>&lt;'a&gt;(\n    &amp;self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n    data: &amp;'a &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Insert a key-value pair in this database, replacing any previous value. The entry is\nwritten with no specific flag.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"i-am-twenty-seven\"</span>));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_reserved\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1882-1891\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.put_reserved\" class=\"fn\">put_reserved</a>&lt;'a, F&gt;(\n    &amp;self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n    data_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n    write_func: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"heed/reserved_space/struct.ReservedSpace.html\" title=\"struct heed::reserved_space::ReservedSpace\">ReservedSpace</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Insert a key-value pair where the value can directly be written to disk, replacing any\nprevious value.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::Write;\n<span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.create_database::&lt;BEI32, Str&gt;(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"number-string\"</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>value = <span class=\"string\">\"I am a long long long value\"</span>;\ndb.put_reserved(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, value.len(), |reserved| {\n    reserved.write_all(value.as_bytes())\n})<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(value));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.put_with_flags\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#1972-1981\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.put_with_flags\" class=\"fn\">put_with_flags</a>&lt;'a&gt;(\n    &amp;self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    flags: <a class=\"struct\" href=\"heed/mdb/lmdb_flags/struct.PutFlags.html\" title=\"struct heed::mdb::lmdb_flags::PutFlags\">PutFlags</a>,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n    data: &amp;'a &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Insert a key-value pair in this database, replacing any previous value. The entry is\nwritten with the specified flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::{Database, PutFlags, DatabaseFlags, Error, MdbError};\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.database_options()\n    .types::&lt;BEI32, Str&gt;()\n    .name(<span class=\"string\">\"dup-i32\"</span>)\n    .flags(DatabaseFlags::DUP_SORT)\n    .create(<span class=\"kw-2\">&amp;mut </span>wtxn)<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-so-cool\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-the-king\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-fun\"</span>)<span class=\"question-mark\">?</span>;\ndb.put_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::APPEND, <span class=\"kw-2\">&amp;</span><span class=\"number\">54</span>, <span class=\"string\">\"i-am-older-than-you\"</span>)<span class=\"question-mark\">?</span>;\ndb.put_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::APPEND_DUP, <span class=\"kw-2\">&amp;</span><span class=\"number\">54</span>, <span class=\"string\">\"ok-but-i-am-better-than-you\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// You can compose flags by OR'ing them\n</span>db.put_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::APPEND_DUP | PutFlags::NO_OVERWRITE, <span class=\"kw-2\">&amp;</span><span class=\"number\">55</span>, <span class=\"string\">\"welcome\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// The NO_DUP_DATA flag will return KeyExist if we try to insert the exact same key/value pair.\n</span><span class=\"kw\">let </span>ret = db.put_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::NO_DUP_DATA, <span class=\"kw-2\">&amp;</span><span class=\"number\">54</span>, <span class=\"string\">\"ok-but-i-am-better-than-you\"</span>);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(ret, <span class=\"prelude-val\">Err</span>(Error::Mdb(MdbError::KeyExist))));\n\n<span class=\"comment\">// The NO_OVERWRITE flag will return KeyExist if we try to insert something with an already existing key.\n</span><span class=\"kw\">let </span>ret = db.put_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::NO_OVERWRITE, <span class=\"kw-2\">&amp;</span><span class=\"number\">54</span>, <span class=\"string\">\"there-can-be-only-one-data\"</span>);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(ret, <span class=\"prelude-val\">Err</span>(Error::Mdb(MdbError::KeyExist))));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.iter(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-fun\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-so-cool\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">42</span>, <span class=\"string\">\"i-am-the-king\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">54</span>, <span class=\"string\">\"i-am-older-than-you\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">54</span>, <span class=\"string\">\"ok-but-i-am-better-than-you\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">55</span>, <span class=\"string\">\"welcome\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_put\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2032-2040\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_or_put\" class=\"fn\">get_or_put</a>&lt;'a, 'txn&gt;(\n    &amp;'txn self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n    data: &amp;'a &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt; + <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to insert a key-value pair in this database, or if a value already exists for the\nkey, returns the previous value.</p>\n<p>The entry is always written with the <a href=\"heed/mdb/lmdb_flags/struct.PutFlags.html#associatedconstant.NO_OVERWRITE\" title=\"associated constant heed::mdb::lmdb_flags::PutFlags::NO_OVERWRITE\"><code>NO_OVERWRITE</code></a> flag.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(db.get_or_put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(db.get_or_put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"the meaning of life\"</span>)<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"i-am-forty-two\"</span>));\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"i-am-forty-two\"</span>));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_put_with_flags\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2079-2088\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_or_put_with_flags\" class=\"fn\">get_or_put_with_flags</a>&lt;'a, 'txn&gt;(\n    &amp;'txn self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    flags: <a class=\"struct\" href=\"heed/mdb/lmdb_flags/struct.PutFlags.html\" title=\"struct heed::mdb::lmdb_flags::PutFlags\">PutFlags</a>,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n    data: &amp;'a &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt; + <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to insert a key-value pair in this database, or if a value already exists for the\nkey, returns the previous value.</p>\n<p>The entry is written with the specified flags, in addition to\n<a href=\"heed/mdb/lmdb_flags/struct.PutFlags.html#associatedconstant.NO_OVERWRITE\" title=\"associated constant heed::mdb::lmdb_flags::PutFlags::NO_OVERWRITE\"><code>NO_OVERWRITE</code></a> which is always used.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::{Database, PutFlags};\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(db.get_or_put_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::empty(), <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(db.get_or_put_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::empty(), <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"the meaning of life\"</span>)<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"i-am-forty-two\"</span>));\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"i-am-forty-two\"</span>));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_put_reserved\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2164-2174\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_or_put_reserved\" class=\"fn\">get_or_put_reserved</a>&lt;'a, 'txn, F&gt;(\n    &amp;'txn self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n    data_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n    write_func: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"heed/reserved_space/struct.ReservedSpace.html\" title=\"struct heed::reserved_space::ReservedSpace\">ReservedSpace</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to insert a key-value pair in this database, where the value can be directly\nwritten to disk, or if a value already exists for the key, returns the previous value.</p>\n<p>The entry is always written with the <a href=\"heed/mdb/lmdb_flags/struct.PutFlags.html#associatedconstant.NO_OVERWRITE\" title=\"associated constant heed::mdb::lmdb_flags::PutFlags::NO_OVERWRITE\"><code>NO_OVERWRITE</code></a> and\n<a href=\"lmdb_master_sys/constant.MDB_RESERVE.html\" title=\"constant lmdb_master_sys::MDB_RESERVE\"><code>MDB_RESERVE</code></a> flags.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::Write;\n<span class=\"kw\">use </span>heed::{Database, PutFlags};\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.create_database::&lt;BEI32, Str&gt;(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"number-string\"</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>long = <span class=\"string\">\"I am a long long long value\"</span>;\n<span class=\"macro\">assert_eq!</span>(\n    db.get_or_put_reserved(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, long.len(), |reserved| {\n        reserved.write_all(long.as_bytes())\n    })<span class=\"question-mark\">?</span>,\n    <span class=\"prelude-val\">None\n</span>);\n\n<span class=\"kw\">let </span>longer = <span class=\"string\">\"I am an even longer long long long value\"</span>;\n<span class=\"macro\">assert_eq!</span>(\n    db.get_or_put_reserved(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, longer.len(), |reserved| {\n        <span class=\"macro\">unreachable!</span>()\n    })<span class=\"question-mark\">?</span>,\n    <span class=\"prelude-val\">Some</span>(long)\n);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(long));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_put_reserved_with_flags\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2228-2239\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.get_or_put_reserved_with_flags\" class=\"fn\">get_or_put_reserved_with_flags</a>&lt;'a, 'txn, F&gt;(\n    &amp;'txn self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    flags: <a class=\"struct\" href=\"heed/mdb/lmdb_flags/struct.PutFlags.html\" title=\"struct heed::mdb::lmdb_flags::PutFlags\">PutFlags</a>,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n    data_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n    write_func: F,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesDecode.html#associatedtype.DItem\" title=\"type heed_traits::BytesDecode::DItem\">DItem</a>&gt;, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"heed/reserved_space/struct.ReservedSpace.html\" title=\"struct heed::reserved_space::ReservedSpace\">ReservedSpace</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to insert a key-value pair in this database, where the value can be directly\nwritten to disk, or if a value already exists for the key, returns the previous value.</p>\n<p>The entry is written with the specified flags, in addition to\n<a href=\"heed/mdb/lmdb_flags/struct.PutFlags.html#associatedconstant.NO_OVERWRITE\" title=\"associated constant heed::mdb::lmdb_flags::PutFlags::NO_OVERWRITE\"><code>NO_OVERWRITE</code></a> and <a href=\"lmdb_master_sys/constant.MDB_RESERVE.html\" title=\"constant lmdb_master_sys::MDB_RESERVE\"><code>MDB_RESERVE</code></a>\nwhich are always used.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::Write;\n<span class=\"kw\">use </span>heed::{Database, PutFlags};\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.create_database::&lt;BEI32, Str&gt;(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"number-string\"</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>long = <span class=\"string\">\"I am a long long long value\"</span>;\n<span class=\"macro\">assert_eq!</span>(\n    db.get_or_put_reserved_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::empty(), <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, long.len(), |reserved| {\n        reserved.write_all(long.as_bytes())\n    })<span class=\"question-mark\">?</span>,\n    <span class=\"prelude-val\">None\n</span>);\n\n<span class=\"kw\">let </span>longer = <span class=\"string\">\"I am an even longer long long long value\"</span>;\n<span class=\"macro\">assert_eq!</span>(\n    db.get_or_put_reserved_with_flags(<span class=\"kw-2\">&amp;mut </span>wtxn, PutFlags::empty(), <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, longer.len(), |reserved| {\n        <span class=\"macro\">unreachable!</span>()\n    })<span class=\"question-mark\">?</span>,\n    <span class=\"prelude-val\">Some</span>(long)\n);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">Some</span>(long));\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delete\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2317-2319\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.delete\" class=\"fn\">delete</a>&lt;'a&gt;(\n    &amp;self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Deletes an entry or every duplicate data items of a key\nif the database supports duplicate data items.</p>\n<p>If the entry does not exist, then <code>false</code> is returned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.delete(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>ret = db.get(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>ret = db.delete(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">467</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"bool-val\">false</span>);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delete_one_duplicate\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2396-2404\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.delete_one_duplicate\" class=\"fn\">delete_one_duplicate</a>&lt;'a&gt;(\n    &amp;self,\n    txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    key: &amp;'a &lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n    data: &amp;'a &lt;DC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,\n    DC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Deletes a single key-value pair in this database.</p>\n<p>If the database doesn’t support duplicate data items the data is ignored.\nIf the key does not exist, then <code>false</code> is returned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI64 = I64&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db = env.database_options()\n    .types::&lt;BEI64, BEI64&gt;()\n    .flags(DatabaseFlags::DUP_SORT)\n    .name(<span class=\"string\">\"dup-sort\"</span>)\n    .create(<span class=\"kw-2\">&amp;mut </span>wtxn)<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">120</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">121</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">122</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">123</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">32</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">35</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">120</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">120</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">120</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.get_duplicates(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>)<span class=\"question-mark\">?</span>.expect(<span class=\"string\">\"the key exists\"</span>);\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">120</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">121</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">122</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">123</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\ndrop(iter);\n\n<span class=\"macro\">assert!</span>(db.delete_one_duplicate(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">121</span>)<span class=\"question-mark\">?</span>, <span class=\"string\">\"The entry must exist\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.get_duplicates(<span class=\"kw-2\">&amp;</span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">68</span>)<span class=\"question-mark\">?</span>.expect(<span class=\"string\">\"the key exists\"</span>);\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">120</span>)));\n<span class=\"comment\">// No more (68, 121) returned here!\n</span><span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">122</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">68</span>, <span class=\"number\">123</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\ndrop(iter);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delete_range\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2472-2475\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.delete_range\" class=\"fn\">delete_range</a>&lt;'a, 'txn, R&gt;(\n    &amp;self,\n    txn: &amp;'txn mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;,\n    range: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a R</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;<div class=\"where\">where\n    KC: <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt; + <a class=\"trait\" href=\"heed_traits/trait.BytesDecode.html\" title=\"trait heed_traits::BytesDecode\">BytesDecode</a>&lt;'txn&gt;,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;&lt;KC as <a class=\"trait\" href=\"heed_traits/trait.BytesEncode.html\" title=\"trait heed_traits::BytesEncode\">BytesEncode</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"heed_traits/trait.BytesEncode.html#associatedtype.EItem\" title=\"type heed_traits::BytesEncode::EItem\">EItem</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Deletes a range of key-value pairs in this database.</p>\n<p>Prefer using <a href=\"heed/database/struct.Database.html#method.clear\" title=\"method heed::database::Database::clear\"><code>clear</code></a> instead of a call to this method with a full range (<a href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\"><code>..</code></a>).</p>\n<p>Comparisons are made by using the bytes representation of the key.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>range = <span class=\"number\">27</span>..=<span class=\"number\">42</span>;\n<span class=\"kw\">let </span>ret = db.delete_range(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span>range)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(ret, <span class=\"number\">2</span>);\n\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = db.iter(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">Some</span>((<span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next().transpose()<span class=\"question-mark\">?</span>, <span class=\"prelude-val\">None</span>);\n\ndrop(iter);\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2534\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;self, txn: &amp;mut <a class=\"struct\" href=\"heed/txn/struct.RwTxn.html\" title=\"struct heed::txn::RwTxn\">RwTxn</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"heed/enum.Error.html\" title=\"enum heed::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Deletes all key/value pairs in this database.</p>\n<p>Prefer using this method instead of a call to <a href=\"heed/database/struct.Database.html#method.delete_range\" title=\"method heed::database::Database::delete_range\"><code>delete_range</code></a> with a full range (<a href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/struct.RangeFull.html\" title=\"struct core::ops::range::RangeFull\"><code>..</code></a>).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;BEI32, Str&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\ndb.clear(<span class=\"kw-2\">&amp;mut </span>wtxn)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>ret = db.is_empty(<span class=\"kw-2\">&amp;</span>wtxn)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(ret);\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remap_types\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2581\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.remap_types\" class=\"fn\">remap_types</a>&lt;KC2, DC2&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC2, DC2, C&gt;</h4></section></summary><div class=\"docblock\"><p>Change the codec types of this database, specifying the codecs.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>It is up to you to ensure that the data read and written using the polymorphic\nhandle correspond to the the typed, uniform one. If an invalid write is made,\nit can corrupt the database from the eyes of heed.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>heed::Database;\n<span class=\"kw\">use </span>heed::types::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>heed::byteorder::BigEndian;\n\n<span class=\"kw\">type </span>BEI32 = I32&lt;BigEndian&gt;;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>wtxn = env.write_txn()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>db: Database&lt;Unit, Unit&gt; = env.create_database(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"iter-i32\"</span>))<span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// We remap the types for ease of use.\n</span><span class=\"kw\">let </span>db = db.remap_types::&lt;BEI32, Str&gt;();\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>, <span class=\"string\">\"i-am-forty-two\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">27</span>, <span class=\"string\">\"i-am-twenty-seven\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, <span class=\"string\">\"i-am-thirteen\"</span>)<span class=\"question-mark\">?</span>;\ndb.put(<span class=\"kw-2\">&amp;mut </span>wtxn, <span class=\"kw-2\">&amp;</span><span class=\"number\">521</span>, <span class=\"string\">\"i-am-five-hundred-and-twenty-one\"</span>)<span class=\"question-mark\">?</span>;\n\nwtxn.commit()<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remap_key_type\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2586\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.remap_key_type\" class=\"fn\">remap_key_type</a>&lt;KC2&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC2, DC, C&gt;</h4></section></summary><div class=\"docblock\"><p>Change the key codec type of this database, specifying the new codec.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remap_data_type\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2591\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.remap_data_type\" class=\"fn\">remap_data_type</a>&lt;DC2&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC, DC2, C&gt;</h4></section></summary><div class=\"docblock\"><p>Change the data codec type of this database, specifying the new codec.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lazily_decode_data\" class=\"method\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2596\">Source</a><h4 class=\"code-header\">pub fn <a href=\"heed/database/struct.Database.html#tymethod.lazily_decode_data\" class=\"fn\">lazily_decode_data</a>(&amp;self) -&gt; <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC, <a class=\"struct\" href=\"heed_types/lazy_decode/struct.LazyDecode.html\" title=\"struct heed_types::lazy_decode::LazyDecode\">LazyDecode</a>&lt;DC&gt;, C&gt;</h4></section></summary><div class=\"docblock\"><p>Wrap the data bytes into a lazy decoder.</p>\n</div></details></div></details>",0,"arroy::Database"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Database%3CKC,+DC,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2609\">Source</a><a href=\"#impl-Debug-for-Database%3CKC,+DC,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;KC, DC, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC, DC, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2610\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","arroy::Database"],["<section id=\"impl-Copy-for-Database%3CKC,+DC,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/heed/database.rs.html#2607\">Source</a><a href=\"#impl-Copy-for-Database%3CKC,+DC,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;KC, DC, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"heed/database/struct.Database.html\" title=\"struct heed::database::Database\">Database</a>&lt;KC, DC, C&gt;</h3></section>","Copy","arroy::Database"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[169644]}