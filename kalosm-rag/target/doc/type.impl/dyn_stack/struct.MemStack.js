(function() {
    var type_impls = Object.fromEntries([["dyn_stack",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemStack\" class=\"impl\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#439-706\">Source</a><a href=\"#impl-MemStack\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"dyn_stack/struct.MemStack.html\" title=\"struct dyn_stack::MemStack\">MemStack</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#442-444\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.new\" class=\"fn\">new</a>(buffer: &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/1.87.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>&gt;]) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Returns a new <a href=\"dyn_stack/struct.MemStack.html\" title=\"struct dyn_stack::MemStack\"><code>MemStack</code></a> from the provided memory buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_any\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#448-451\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.new_any\" class=\"fn\">new_any</a>&lt;T&gt;(buffer: &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/1.87.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Returns a new <a href=\"dyn_stack/struct.MemStack.html\" title=\"struct dyn_stack::MemStack\"><code>MemStack</code></a> from the provided memory buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.can_hold\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#457-463\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.can_hold\" class=\"fn\">can_hold</a>(&amp;self, alloc_req: <a class=\"struct\" href=\"dyn_stack/struct.StackReq.html\" title=\"struct dyn_stack::StackReq\">StackReq</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the stack can hold an allocation with the given size and alignment\nrequirements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#467-469\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.len_bytes\" class=\"fn\">len_bytes</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of bytes that this stack can hold.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#473-475\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Returns a pointer to the (possibly uninitialized) stack memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_aligned_uninit\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#518-536\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.make_aligned_uninit\" class=\"fn\">make_aligned_uninit</a>&lt;T&gt;(\n    &amp;mut self,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n    align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n) -&gt; (&amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/1.87.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], &amp;mut Self)</h4></section></summary><div class=\"docblock\"><p>Returns a new aligned and uninitialized <a href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\"><code>DynArray</code></a> and a stack over the remainder of the\nbuffer.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the stack isn’t large enough to allocate the array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_aligned_with\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#548-567\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.make_aligned_with\" class=\"fn\">make_aligned_with</a>&lt;T&gt;(\n    &amp;mut self,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n    align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>) -&gt; T,\n) -&gt; (<a class=\"struct\" href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\">DynArray</a>&lt;'_, T&gt;, &amp;mut Self)</h4></section></summary><div class=\"docblock\"><p>Returns a new aligned <a href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\"><code>DynArray</code></a>, initialized with the provided function, and a stack\nover the remainder of the buffer.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the stack isn’t large enough to allocate the array, or if the provided function\npanics.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_uninit\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#598-600\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.make_uninit\" class=\"fn\">make_uninit</a>&lt;T&gt;(\n    &amp;mut self,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n) -&gt; (&amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/1.87.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], &amp;mut Self)</h4></section></summary><div class=\"docblock\"><p>Returns a new uninitialized <a href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\"><code>DynArray</code></a> and a stack over the remainder of the buffer.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the stack isn’t large enough to allocate the array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_with\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#612-618\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.make_with\" class=\"fn\">make_with</a>&lt;T&gt;(\n    &amp;mut self,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>) -&gt; T,\n) -&gt; (<a class=\"struct\" href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\">DynArray</a>&lt;'_, T&gt;, &amp;mut Self)</h4></section></summary><div class=\"docblock\"><p>Returns a new <a href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\"><code>DynArray</code></a>, initialized with the provided function, and a stack over the\nremainder of the buffer.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the stack isn’t large enough to allocate the array, or if the provided function\npanics.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect_aligned\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#631-637\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.collect_aligned\" class=\"fn\">collect_aligned</a>&lt;I&gt;(\n    &amp;mut self,\n    align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>,\n    iter: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = I&gt;,\n) -&gt; (<a class=\"struct\" href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\">DynArray</a>&lt;'_, I&gt;, &amp;mut Self)</h4></section></summary><div class=\"docblock\"><p>Returns a new aligned <a href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\"><code>DynArray</code></a>, initialized with the provided iterator, and a stack\nover the remainder of the buffer.<br />\nIf there isn’t enough space for all the iterator items, then the returned array only\ncontains the first elements that fit into the stack.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if the provided iterator panics.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#650-655\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.collect\" class=\"fn\">collect</a>&lt;I&gt;(\n    &amp;mut self,\n    iter: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = I&gt;,\n) -&gt; (<a class=\"struct\" href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\">DynArray</a>&lt;'_, I&gt;, &amp;mut Self)</h4></section></summary><div class=\"docblock\"><p>Returns a new <a href=\"dyn_stack/struct.DynArray.html\" title=\"struct dyn_stack::DynArray\"><code>DynArray</code></a>, initialized with the provided iterator, and a stack over the\nremainder of the buffer.<br />\nIf there isn’t enough space for all the iterator items, then the returned array only\ncontains the first elements that fit into the stack.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if the provided iterator panics.</p>\n</div></details><section id=\"method.bump\" class=\"method\"><a class=\"src rightside\" href=\"src/dyn_stack/lib.rs.html#703-705\">Source</a><h4 class=\"code-header\">pub fn <a href=\"dyn_stack/struct.MemStack.html#tymethod.bump\" class=\"fn\">bump</a>&lt;'bump, 'stack&gt;(\n    self: &amp;'bump mut &amp;'stack mut Self,\n) -&gt; &amp;'bump mut <a class=\"struct\" href=\"dyn_stack/struct.Bump.html\" title=\"struct dyn_stack::Bump\">Bump</a>&lt;'stack&gt;</h4></section></div></details>",0,"dyn_stack::DynStack"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[12237]}