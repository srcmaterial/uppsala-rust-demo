(function() {
    var type_impls = Object.fromEntries([["kalosm",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#197\">Source</a><a href=\"#impl-BitAnd%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#201\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>An <code>intersection</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#198\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd<&RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#187\">Source</a><a href=\"#impl-BitAnd-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#191\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>An <code>intersection</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#188\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#259\">Source</a><a href=\"#impl-BitAndAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#261\">Source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>An <code>intersection</code> between two sets.</p>\n</div></details></div></details>","BitAndAssign<&RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#236\">Source</a><a href=\"#impl-BitAndAssign-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#238\">Source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>An <code>intersection</code> between two sets.</p>\n</div></details></div></details>","BitAndAssign","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#117\">Source</a><a href=\"#impl-BitOr%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#121\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>An <code>union</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#118\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr<&RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#107\">Source</a><a href=\"#impl-BitOr-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#111\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>An <code>union</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#108\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#174\">Source</a><a href=\"#impl-BitOrAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#176\">Source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>An <code>union</code> between two sets.</p>\n</div></details></div></details>","BitOrAssign<&RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#156\">Source</a><a href=\"#impl-BitOrAssign-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#158\">Source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>An <code>union</code> between two sets.</p>\n</div></details></div></details>","BitOrAssign","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#361\">Source</a><a href=\"#impl-BitXor%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#365\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>A <code>symmetric difference</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#362\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor<&RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#351\">Source</a><a href=\"#impl-BitXor-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#355\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>A <code>symmetric difference</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#352\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#424\">Source</a><a href=\"#impl-BitXorAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#426\">Source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>A <code>symmetric difference</code> between two sets.</p>\n</div></details></div></details>","BitXorAssign<&RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#405\">Source</a><a href=\"#impl-BitXorAssign-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#407\">Source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>A <code>symmetric difference</code> between two sets.</p>\n</div></details></div></details>","BitXorAssign","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#817\">Source</a><a href=\"#impl-Clone-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#818\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#822\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/fmt.rs.html#8\">Source</a><a href=\"#impl-Debug-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/fmt.rs.html#9\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#811\">Source</a><a href=\"#impl-Default-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#812\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26u32%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#763\">Source</a><a href=\"#impl-Extend%3C%26u32%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#782\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, values: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts multiple values and returns the count of new additions.\nThis is expected to be faster than calling <a href=\"roaring/bitmap/struct.RoaringBitmap.html#method.insert\" title=\"method roaring::bitmap::RoaringBitmap::insert\"><code>RoaringBitmap::insert</code></a> on each value.</p>\n<p>The provided integers values don’t have to be in sorted order, but it may be preferable\nto sort them from a performance point of view.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1500</span>, <span class=\"number\">1508</span>, <span class=\"number\">1507</span>, <span class=\"number\">1509</span>]);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">1508</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a u32>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3Cu32%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#717\">Source</a><a href=\"#impl-Extend%3Cu32%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#736\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, values: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts multiple values and returns the count of new additions.\nThis is expected to be faster than calling <a href=\"roaring/bitmap/struct.RoaringBitmap.html#method.insert\" title=\"method roaring::bitmap::RoaringBitmap::insert\"><code>RoaringBitmap::insert</code></a> on each value.</p>\n<p>The provided integers values don’t have to be in sorted order, but it may be preferable\nto sort them from a performance point of view.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1500</span>, <span class=\"number\">1508</span>, <span class=\"number\">1507</span>, <span class=\"number\">1509</span>]);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">1508</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<u32>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu32;+N%5D%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#695\">Source</a><a href=\"#impl-From%3C%5Bu32;+N%5D%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#696\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.array.html\">N</a>]) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u32; N]>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26u32%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#709\">Source</a><a href=\"#impl-FromIterator%3C%26u32%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#710\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iterator: I) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a u32>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3Cu32%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#701\">Source</a><a href=\"#impl-FromIterator%3Cu32%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#702\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iterator: I) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<u32>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#686\">Source</a><a href=\"#impl-IntoIterator-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#687\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#688\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"roaring/bitmap/iter/struct.IntoIter.html\" title=\"struct roaring::bitmap::iter::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#690\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"roaring/bitmap/iter/struct.IntoIter.html\" title=\"struct roaring::bitmap::iter::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoVectorDbSearchFilter%3C()%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/kalosm_language/vector_db.rs.html#313\">Source</a><a href=\"#impl-IntoVectorDbSearchFilter%3C()%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"kalosm/language/trait.IntoVectorDbSearchFilter.html\" title=\"trait kalosm::language::IntoVectorDbSearchFilter\">IntoVectorDbSearchFilter</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vector_db_search_filter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kalosm_language/vector_db.rs.html#314\">Source</a><a href=\"#method.into_vector_db_search_filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kalosm/language/trait.IntoVectorDbSearchFilter.html#tymethod.into_vector_db_search_filter\" class=\"fn\">into_vector_db_search_filter</a>(self, _: &amp;<a class=\"struct\" href=\"kalosm/language/struct.VectorDB.html\" title=\"struct kalosm::language::VectorDB\">VectorDB</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>Convert the filter into a set of candidates.</div></details></div></details>","IntoVectorDbSearchFilter<()>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiOps%3C%26RoaringBitmap%3E-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#71-73\">Source</a><a href=\"#impl-MultiOps%3C%26RoaringBitmap%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, I&gt; <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#75\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"roaring/trait.MultiOps.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The type of output from operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#77\">Source</a><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.union\" class=\"fn\">union</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>union</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#81\">Source</a><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.intersection\" class=\"fn\">intersection</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>intersection</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#85\">Source</a><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.difference\" class=\"fn\">difference</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>difference</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#89\">Source</a><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.symmetric_difference\" class=\"fn\">symmetric_difference</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>symmetric difference</code> between all elements.</div></details></div></details>","MultiOps<&'a RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiOps%3CRoaringBitmap%3E-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#25-27\">Source</a><a href=\"#impl-MultiOps%3CRoaringBitmap%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#29\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"roaring/trait.MultiOps.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The type of output from operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#31\">Source</a><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.union\" class=\"fn\">union</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>union</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#35\">Source</a><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.intersection\" class=\"fn\">intersection</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>intersection</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#39\">Source</a><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.difference\" class=\"fn\">difference</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>difference</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#43\">Source</a><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.symmetric_difference\" class=\"fn\">symmetric_difference</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>symmetric difference</code> between all elements.</div></details></div></details>","MultiOps<RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/mod.rs.html#47\">Source</a><a href=\"#impl-PartialEq-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/mod.rs.html#47\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/cmp.rs.html#8\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/cmp.rs.html#29\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_disjoint\" class=\"fn\">is_disjoint</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the set has no elements in common with other. This is equivalent to\nchecking for an empty intersection.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb1 = RoaringBitmap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb2 = RoaringBitmap::new();\n\nrb1.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_disjoint(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">true</span>);\n\nrb2.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_disjoint(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">false</span>);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_subset\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/cmp.rs.html#57\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_subset\" class=\"fn\">is_subset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this set is a subset of <code>other</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb1 = RoaringBitmap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb2 = RoaringBitmap::new();\n\nrb1.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_subset(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">false</span>);\n\nrb2.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_subset(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">true</span>);\n\nrb1.insert(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_subset(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_superset\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/cmp.rs.html#94\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_superset\" class=\"fn\">is_superset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this set is a superset of <code>other</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb1 = RoaringBitmap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb2 = RoaringBitmap::new();\n\nrb1.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb2.is_superset(<span class=\"kw-2\">&amp;</span>rb1), <span class=\"bool-val\">false</span>);\n\nrb2.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb2.is_superset(<span class=\"kw-2\">&amp;</span>rb1), <span class=\"bool-val\">true</span>);\n\nrb1.insert(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb2.is_superset(<span class=\"kw-2\">&amp;</span>rb1), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details></div></details>",0,"kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#14\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#23\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>RoaringBitmap</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n<span class=\"kw\">let </span>rb = RoaringBitmap::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#35\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.full\" class=\"fn\">full</a>() -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>Creates a full <code>RoaringBitmap</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n<span class=\"kw\">let </span>rb = RoaringBitmap::full();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_lsb0_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#87\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.from_lsb0_bytes\" class=\"fn\">from_lsb0_bytes</a>(offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>, bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>Creates a <code>RoaringBitmap</code> from a byte slice, interpreting the bytes as a bitmap with a specified offset.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>offset: u32</code> - The starting position in the bitmap where the byte slice will be applied, specified in bits.\nThis means that if <code>offset</code> is <code>n</code>, the first byte in the slice will correspond to the <code>n</code>th bit(0-indexed) in the bitmap.</li>\n<li><code>bytes: &amp;[u8]</code> - The byte slice containing the bitmap data. The bytes are interpreted in “Least-Significant-First” bit order.</li>\n</ul>\n<h5 id=\"interpretation-of-bytes\"><a class=\"doc-anchor\" href=\"#interpretation-of-bytes\">§</a>Interpretation of <code>bytes</code></h5>\n<p>The <code>bytes</code> slice is interpreted in “Least-Significant-First” bit order. Each byte is read from least significant bit (LSB) to most significant bit (MSB).\nFor example, the byte <code>0b00000101</code> represents the bits <code>1, 0, 1, 0, 0, 0, 0, 0</code> in that order (see Examples section).</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function will panic if <code>bytes.len() + offset</code> is greater than 2^32.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>bytes = [<span class=\"number\">0b00000101</span>, <span class=\"number\">0b00000010</span>, <span class=\"number\">0b00000000</span>, <span class=\"number\">0b10000000</span>];\n<span class=\"comment\">//             ^^^^^^^^    ^^^^^^^^    ^^^^^^^^    ^^^^^^^^\n//             76543210          98\n</span><span class=\"kw\">let </span>rb = RoaringBitmap::from_lsb0_bytes(<span class=\"number\">0</span>, <span class=\"kw-2\">&amp;</span>bytes);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">0</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">9</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">31</span>));\n\n<span class=\"kw\">let </span>rb = RoaringBitmap::from_lsb0_bytes(<span class=\"number\">8</span>, <span class=\"kw-2\">&amp;</span>bytes);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">8</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">9</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">10</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">17</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">39</span>));\n\n<span class=\"kw\">let </span>rb = RoaringBitmap::from_lsb0_bytes(<span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span>bytes);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">3</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">4</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">5</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">12</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">34</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#187\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Adds a value to the set.</p>\n<p>Returns whether the value was absent from the set.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.insert(<span class=\"number\">3</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(rb.insert(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">3</span>), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#229-231\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.insert_range\" class=\"fn\">insert_range</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a range of values.\nReturns the number of inserted values.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert_range(<span class=\"number\">2</span>..<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">3</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#294\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Pushes <code>value</code> in the bitmap only if it is greater than the current maximum value.</p>\n<p>Returns whether the value was inserted.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert!</span>(rb.push(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(rb.push(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(rb.push(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert!</span>(rb.push(<span class=\"number\">5</span>));\n\n<span class=\"macro\">assert_eq!</span>(rb.iter().collect::&lt;Vec&lt;u32&gt;&gt;(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#347\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Removes a value from the set. Returns <code>true</code> if the value was present in the set.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(rb.remove(<span class=\"number\">3</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(rb.remove(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#378-380\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.remove_range\" class=\"fn\">remove_range</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes a range of values.\nReturns the number of removed values.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert(<span class=\"number\">2</span>);\nrb.insert(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(rb.remove_range(<span class=\"number\">2</span>..<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#422\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.contains\" class=\"fn\">contains</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this set contains the specified integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">0</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">100</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#450-452\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.contains_range\" class=\"fn\">contains_range</a>&lt;R&gt;(&amp;self, range: R) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if all values in the range are present in this set.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"comment\">// An empty range is always contained\n</span><span class=\"macro\">assert!</span>(rb.contains_range(<span class=\"number\">7</span>..<span class=\"number\">7</span>));\n\nrb.insert_range(<span class=\"number\">1</span>..<span class=\"number\">0xFFF</span>);\n<span class=\"macro\">assert!</span>(rb.contains_range(<span class=\"number\">1</span>..<span class=\"number\">0xFFF</span>));\n<span class=\"macro\">assert!</span>(rb.contains_range(<span class=\"number\">2</span>..<span class=\"number\">0xFFF</span>));\n<span class=\"comment\">// 0 is not contained\n</span><span class=\"macro\">assert!</span>(!rb.contains_range(<span class=\"number\">0</span>..<span class=\"number\">2</span>));\n<span class=\"comment\">// 0xFFF is not contained\n</span><span class=\"macro\">assert!</span>(!rb.contains_range(<span class=\"number\">1</span>..=<span class=\"number\">0xFFF</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range_cardinality\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#511-513\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.range_cardinality\" class=\"fn\">range_cardinality</a>&lt;R&gt;(&amp;self, range: R) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in this set which are in the passed range.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert_range(<span class=\"number\">0x10000</span>..<span class=\"number\">0x40000</span>);\nrb.insert(<span class=\"number\">0x50001</span>);\nrb.insert(<span class=\"number\">0x50005</span>);\nrb.insert(u32::MAX);\n\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0</span>..<span class=\"number\">0x10000</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0x10000</span>..<span class=\"number\">0x40000</span>), <span class=\"number\">0x30000</span>);\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0x50000</span>..<span class=\"number\">0x60000</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0x10000</span>..<span class=\"number\">0x10000</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0x50000</span>..=u32::MAX), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#571\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears all integers in this set.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\nrb.clear();\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#589\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if there are no integers in this set.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.is_empty(), <span class=\"bool-val\">true</span>);\n\nrb.insert(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(rb.is_empty(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#605\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if there are every possible integers in this set.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::full();\n<span class=\"macro\">assert!</span>(!rb.is_empty());\n<span class=\"macro\">assert!</span>(rb.is_full());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#628\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of distinct integers added to the set.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.len(), <span class=\"number\">0</span>);\n\nrb.insert(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(rb.len(), <span class=\"number\">1</span>);\n\nrb.insert(<span class=\"number\">3</span>);\nrb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(rb.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#647\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.min\" class=\"fn\">min</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the minimum value in the set (if the set is non-empty).</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.min(), <span class=\"prelude-val\">None</span>);\n\nrb.insert(<span class=\"number\">3</span>);\nrb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(rb.min(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#666\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.max\" class=\"fn\">max</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the maximum value in the set (if the set is non-empty).</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.max(), <span class=\"prelude-val\">None</span>);\n\nrb.insert(<span class=\"number\">3</span>);\nrb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(rb.max(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rank\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#686\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.rank\" class=\"fn\">rank</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of integers that are &lt;= value. rank(u32::MAX) == len()</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.rank(<span class=\"number\">0</span>), <span class=\"number\">0</span>);\n\nrb.insert(<span class=\"number\">3</span>);\nrb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(rb.rank(<span class=\"number\">3</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(rb.rank(<span class=\"number\">10</span>), <span class=\"number\">2</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#721\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.select\" class=\"fn\">select</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>n</code>th integer in the set or <code>None</code> if <code>n &gt;= len()</code></p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n\nrb.append(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>]);\n\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_smallest\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#753\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.remove_smallest\" class=\"fn\">remove_smallest</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Removes the <code>n</code> smallests values from this bitmap.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::from_iter([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);\nrb.remove_smallest(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(rb, RoaringBitmap::from_iter([<span class=\"number\">7</span>, <span class=\"number\">9</span>]));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::from_iter([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);\nrb.remove_smallest(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(rb, RoaringBitmap::from_iter([<span class=\"number\">7</span>, <span class=\"number\">9</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_biggest\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#788\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.remove_biggest\" class=\"fn\">remove_biggest</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Removes the <code>n</code> biggests values from this bitmap.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::from_iter([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);\nrb.remove_biggest(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(rb, RoaringBitmap::from_iter([<span class=\"number\">1</span>, <span class=\"number\">5</span>]));\nrb.remove_biggest(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(rb, RoaringBitmap::from_iter([<span class=\"number\">1</span>]));</code></pre></div>\n</div></details></div></details>",0,"kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#545\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#561\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"roaring/bitmap/iter/struct.Iter.html\" title=\"struct roaring::bitmap::iter::Iter\">Iter</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Iterator over each value stored in the RoaringBitmap, guarantees values are ordered by value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n<span class=\"kw\">use </span>core::iter::FromIterator;\n\n<span class=\"kw\">let </span>bitmap = (<span class=\"number\">1</span>..<span class=\"number\">3</span>).collect::&lt;RoaringBitmap&gt;();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap.iter();\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#594-596\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.range\" class=\"fn\">range</a>&lt;R&gt;(&amp;self, range: R) -&gt; <a class=\"struct\" href=\"roaring/bitmap/iter/struct.Iter.html\" title=\"struct roaring::bitmap::iter::Iter\">Iter</a>&lt;'_&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Iterator over values within a range stored in the RoaringBitmap.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::ops::Bound;\n<span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>bitmap = RoaringBitmap::from([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, u32::MAX]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap.range(<span class=\"number\">10</span>..<span class=\"number\">20</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">11</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap.range(<span class=\"number\">100</span>..);\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(u32::MAX));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap.range((Bound::Excluded(<span class=\"number\">0</span>), Bound::Included(<span class=\"number\">10</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#651-653\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.into_range\" class=\"fn\">into_range</a>&lt;R&gt;(self, range: R) -&gt; <a class=\"struct\" href=\"roaring/bitmap/iter/struct.IntoIter.html\" title=\"struct roaring::bitmap::iter::IntoIter\">IntoIter</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Iterator over values within a range stored in the RoaringBitmap.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::ops::Bound;\n<span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">fn </span>bitmap() -&gt; RoaringBitmap {\n    RoaringBitmap::from([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, u32::MAX])\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap().into_range(<span class=\"number\">10</span>..<span class=\"number\">20</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">11</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap().into_range(<span class=\"number\">100</span>..);\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(u32::MAX));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap().into_range((Bound::Excluded(<span class=\"number\">0</span>), Bound::Included(<span class=\"number\">10</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#787\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sorted_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#817-819\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.from_sorted_iter\" class=\"fn\">from_sorted_iter</a>&lt;I&gt;(\n    iterator: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>, <a class=\"struct\" href=\"roaring/struct.NonSortedIntegers.html\" title=\"struct roaring::NonSortedIntegers\">NonSortedIntegers</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create the set from a sorted iterator. Values must be sorted and deduplicated.</p>\n<p>The values of the iterator must be ordered and strictly greater than the greatest value\nin the set. If a value in the iterator doesn’t satisfy this requirement, it is not added\nand the append operation is stopped.</p>\n<p>Returns <code>Ok</code> with the requested <code>RoaringBitmap</code>, <code>Err</code> with the number of elements\nthat were correctly appended before failure.</p>\n<h5 id=\"example-create-a-set-from-an-ordered-list-of-integers\"><a class=\"doc-anchor\" href=\"#example-create-a-set-from-an-ordered-list-of-integers\">§</a>Example: Create a set from an ordered list of integers.</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::from_sorted_iter(<span class=\"number\">0</span>..<span class=\"number\">10</span>).unwrap();\n\n<span class=\"macro\">assert!</span>(rb.iter().eq(<span class=\"number\">0</span>..<span class=\"number\">10</span>));</code></pre></div>\n<h5 id=\"example-try-to-create-a-set-from-a-non-ordered-list-of-integers\"><a class=\"doc-anchor\" href=\"#example-try-to-create-a-set-from-a-non-ordered-list-of-integers\">§</a>Example: Try to create a set from a non-ordered list of integers.</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>integers = <span class=\"number\">0</span>..<span class=\"number\">10u32</span>;\n<span class=\"kw\">let </span>error = RoaringBitmap::from_sorted_iter(integers.rev()).unwrap_err();\n\n<span class=\"macro\">assert_eq!</span>(error.valid_until(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#843-846\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.append\" class=\"fn\">append</a>&lt;I&gt;(&amp;mut self, iterator: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"roaring/struct.NonSortedIntegers.html\" title=\"struct roaring::NonSortedIntegers\">NonSortedIntegers</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extend the set with a sorted iterator.</p>\n<p>The values of the iterator must be ordered and strictly greater than the greatest value\nin the set. If a value in the iterator doesn’t satisfy this requirement, it is not added\nand the append operation is stopped.</p>\n<p>Returns <code>Ok</code> with the number of elements appended to the set, <code>Err</code> with\nthe number of elements we effectively appended before an error occurred.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.append(<span class=\"number\">0</span>..<span class=\"number\">10</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));\n\n<span class=\"macro\">assert!</span>(rb.iter().eq(<span class=\"number\">0</span>..<span class=\"number\">10</span>));</code></pre></div>\n</div></details></div></details>",0,"kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#11\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection_len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#29\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.intersection_len\" class=\"fn\">intersection_len</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the len of the intersection with the specified other bitmap without creating a\nnew bitmap.</p>\n<p>This is faster and more space efficient when you’re only interested in the cardinality of\nthe intersection.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n\n<span class=\"macro\">assert_eq!</span>(rb1.intersection_len(<span class=\"kw-2\">&amp;</span>rb2), (rb1 &amp; rb2).len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#56\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.union_len\" class=\"fn\">union_len</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the len of the union with the specified other bitmap without creating a new bitmap.</p>\n<p>This is faster and more space efficient when you’re only interested in the cardinality of\nthe union.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n\n<span class=\"macro\">assert_eq!</span>(rb1.union_len(<span class=\"kw-2\">&amp;</span>rb2), (rb1 | rb2).len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference_len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#77\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.difference_len\" class=\"fn\">difference_len</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the len of the difference with the specified other bitmap without creating a new\nbitmap.</p>\n<p>This is faster and more space efficient when you’re only interested in the cardinality of\nthe difference.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n\n<span class=\"macro\">assert_eq!</span>(rb1.difference_len(<span class=\"kw-2\">&amp;</span>rb2), (rb1 - rb2).len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference_len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#98\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.symmetric_difference_len\" class=\"fn\">symmetric_difference_len</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the len of the symmetric difference with the specified other bitmap without\ncreating a new bitmap.</p>\n<p>This is faster and more space efficient when you’re only interested in the cardinality of\nthe symmetric difference.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n\n<span class=\"macro\">assert_eq!</span>(rb1.symmetric_difference_len(<span class=\"kw-2\">&amp;</span>rb2), (rb1 ^ rb2).len());</code></pre></div>\n</div></details></div></details>",0,"kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops_with_serialized.rs.html#18\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection_with_serialized_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops_with_serialized.rs.html#44-46\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.intersection_with_serialized_unchecked\" class=\"fn\">intersection_with_serialized_unchecked</a>&lt;R&gt;(\n    &amp;self,\n    other: R,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a>,</div></h4></section></summary><div class=\"docblock\"><p>Computes the intersection between a materialized <a href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\"><code>RoaringBitmap</code></a> and a serialized one.</p>\n<p>This is faster and more space efficient when you only need the intersection result.\nIt reduces the number of deserialized internal container and therefore\nthe number of allocations and copies of bytes.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n<span class=\"kw\">use </span>std::io::Cursor;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n<span class=\"comment\">// Let's say the rb2 bitmap is serialized\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = Vec::new();\nrb2.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2_bytes = Cursor::new(bytes);\n\n<span class=\"macro\">assert_eq!</span>(\n    rb1.intersection_with_serialized_unchecked(rb2_bytes).unwrap(),\n    rb1 &amp; rb2,\n);</code></pre></div>\n</div></details></div></details>",0,"kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#19\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialized_size\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#35\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.serialized_size\" class=\"fn\">serialized_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the size in bytes of the serialized output.\nThis is compatible with the official C/C++, Java and Go implementations.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = Vec::with_capacity(rb1.serialized_size());\nrb1.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2 = RoaringBitmap::deserialize_from(<span class=\"kw-2\">&amp;</span>bytes[..]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(rb1, rb2);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_into\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#66\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.serialize_into\" class=\"fn\">serialize_into</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class=\"docblock\"><p>Serialize this bitmap into <a href=\"https://github.com/RoaringBitmap/RoaringFormatSpec\">the standard Roaring on-disk format</a>.\nThis is compatible with the official C/C++, Java and Go implementations.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"macro\">vec!</span>[];\nrb1.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2 = RoaringBitmap::deserialize_from(<span class=\"kw-2\">&amp;</span>bytes[..]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(rb1, rb2);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_from\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#126\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.deserialize_from\" class=\"fn\">deserialize_from</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class=\"docblock\"><p>Deserialize a bitmap into memory from <a href=\"https://github.com/RoaringBitmap/RoaringFormatSpec\">the standard Roaring on-disk\nformat</a>. This is compatible with the official C/C++, Java and\nGo implementations. This method checks that all of the internal values\nare valid. If deserializing from a trusted source consider\n<a href=\"roaring/bitmap/struct.RoaringBitmap.html#method.deserialize_unchecked_from\" title=\"associated function roaring::bitmap::RoaringBitmap::deserialize_unchecked_from\">RoaringBitmap::deserialize_unchecked_from</a></p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"macro\">vec!</span>[];\nrb1.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2 = RoaringBitmap::deserialize_from(<span class=\"kw-2\">&amp;</span>bytes[..]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(rb1, rb2);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_unchecked_from\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#149\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.deserialize_unchecked_from\" class=\"fn\">deserialize_unchecked_from</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class=\"docblock\"><p>Deserialize a bitmap into memory from <a href=\"https://github.com/RoaringBitmap/RoaringFormatSpec\">the standard Roaring on-disk\nformat</a>. This is compatible with the official C/C++, Java and\nGo implementations. This method is memory safe but will not check if\nthe data is a valid bitmap.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"macro\">vec!</span>[];\nrb1.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2 = RoaringBitmap::deserialize_unchecked_from(<span class=\"kw-2\">&amp;</span>bytes[..]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(rb1, rb2);</code></pre></div>\n</div></details></div></details>",0,"kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/statistics.rs.html#40\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.statistics\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/statistics.rs.html#63\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.statistics\" class=\"fn\">statistics</a>(&amp;self) -&gt; <a class=\"struct\" href=\"roaring/bitmap/statistics/struct.Statistics.html\" title=\"struct roaring::bitmap::statistics::Statistics\">Statistics</a></h4></section></summary><div class=\"docblock\"><p>Returns statistics about the composition of a roaring bitmap.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bitmap: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">100</span>).collect();\n<span class=\"kw\">let </span>statistics = bitmap.statistics();\n\n<span class=\"macro\">assert_eq!</span>(statistics.n_containers, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_array_containers, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_run_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_bitset_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_values_array_containers, <span class=\"number\">99</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_values_run_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_values_bitset_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_bytes_array_containers, <span class=\"number\">512</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_bytes_run_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_bytes_bitset_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.max_value, <span class=\"prelude-val\">Some</span>(<span class=\"number\">99</span>));\n<span class=\"macro\">assert_eq!</span>(statistics.min_value, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(statistics.cardinality, <span class=\"number\">99</span>);</code></pre></div>\n</div></details></div></details>",0,"kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#285\">Source</a><a href=\"#impl-Sub%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#289\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>A <code>difference</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#286\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<&RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#275\">Source</a><a href=\"#impl-Sub-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#279\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>A <code>difference</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#276\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#336\">Source</a><a href=\"#impl-SubAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#338\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>A <code>difference</code> between two sets.</p>\n</div></details></div></details>","SubAssign<&RoaringBitmap>","kalosm::language::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#329\">Source</a><a href=\"#impl-SubAssign-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#331\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>A <code>difference</code> between two sets.</p>\n</div></details></div></details>","SubAssign","kalosm::language::Candidates"],["<section id=\"impl-StructuralPartialEq-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/mod.rs.html#47\">Source</a><a href=\"#impl-StructuralPartialEq-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section>","StructuralPartialEq","kalosm::language::Candidates"]]],["kalosm_language",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#197\">Source</a><a href=\"#impl-BitAnd%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#201\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>An <code>intersection</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#198\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd<&RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#187\">Source</a><a href=\"#impl-BitAnd-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#191\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>An <code>intersection</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#188\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#259\">Source</a><a href=\"#impl-BitAndAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#261\">Source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>An <code>intersection</code> between two sets.</p>\n</div></details></div></details>","BitAndAssign<&RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#236\">Source</a><a href=\"#impl-BitAndAssign-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#238\">Source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>An <code>intersection</code> between two sets.</p>\n</div></details></div></details>","BitAndAssign","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#117\">Source</a><a href=\"#impl-BitOr%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#121\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>An <code>union</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#118\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr<&RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#107\">Source</a><a href=\"#impl-BitOr-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#111\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>An <code>union</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#108\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#174\">Source</a><a href=\"#impl-BitOrAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#176\">Source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>An <code>union</code> between two sets.</p>\n</div></details></div></details>","BitOrAssign<&RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#156\">Source</a><a href=\"#impl-BitOrAssign-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#158\">Source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>An <code>union</code> between two sets.</p>\n</div></details></div></details>","BitOrAssign","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#361\">Source</a><a href=\"#impl-BitXor%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#365\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>A <code>symmetric difference</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#362\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor<&RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#351\">Source</a><a href=\"#impl-BitXor-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#355\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>A <code>symmetric difference</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#352\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#424\">Source</a><a href=\"#impl-BitXorAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#426\">Source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>A <code>symmetric difference</code> between two sets.</p>\n</div></details></div></details>","BitXorAssign<&RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#405\">Source</a><a href=\"#impl-BitXorAssign-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#407\">Source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>A <code>symmetric difference</code> between two sets.</p>\n</div></details></div></details>","BitXorAssign","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#817\">Source</a><a href=\"#impl-Clone-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#818\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#822\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/fmt.rs.html#8\">Source</a><a href=\"#impl-Debug-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/fmt.rs.html#9\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#811\">Source</a><a href=\"#impl-Default-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#812\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%26u32%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#763\">Source</a><a href=\"#impl-Extend%3C%26u32%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#782\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, values: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts multiple values and returns the count of new additions.\nThis is expected to be faster than calling <a href=\"roaring/bitmap/struct.RoaringBitmap.html#method.insert\" title=\"method roaring::bitmap::RoaringBitmap::insert\"><code>RoaringBitmap::insert</code></a> on each value.</p>\n<p>The provided integers values don’t have to be in sorted order, but it may be preferable\nto sort them from a performance point of view.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1500</span>, <span class=\"number\">1508</span>, <span class=\"number\">1507</span>, <span class=\"number\">1509</span>]);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">1508</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<&'a u32>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3Cu32%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#717\">Source</a><a href=\"#impl-Extend%3Cu32%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#736\">Source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, values: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts multiple values and returns the count of new additions.\nThis is expected to be faster than calling <a href=\"roaring/bitmap/struct.RoaringBitmap.html#method.insert\" title=\"method roaring::bitmap::RoaringBitmap::insert\"><code>RoaringBitmap::insert</code></a> on each value.</p>\n<p>The provided integers values don’t have to be in sorted order, but it may be preferable\nto sort them from a performance point of view.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1500</span>, <span class=\"number\">1508</span>, <span class=\"number\">1507</span>, <span class=\"number\">1509</span>]);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">1508</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.87.0/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<u32>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5Bu32;+N%5D%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#695\">Source</a><a href=\"#impl-From%3C%5Bu32;+N%5D%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#696\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.array.html\">N</a>]) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[u32; N]>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26u32%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#709\">Source</a><a href=\"#impl-FromIterator%3C%26u32%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#710\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iterator: I) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a u32>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3Cu32%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#701\">Source</a><a href=\"#impl-FromIterator%3Cu32%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#702\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iterator: I) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<u32>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#686\">Source</a><a href=\"#impl-IntoIterator-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#687\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#688\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"roaring/bitmap/iter/struct.IntoIter.html\" title=\"struct roaring::bitmap::iter::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#690\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"roaring/bitmap/iter/struct.IntoIter.html\" title=\"struct roaring::bitmap::iter::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiOps%3C%26RoaringBitmap%3E-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#71-73\">Source</a><a href=\"#impl-MultiOps%3C%26RoaringBitmap%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, I&gt; <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#75\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"roaring/trait.MultiOps.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The type of output from operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#77\">Source</a><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.union\" class=\"fn\">union</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>union</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#81\">Source</a><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.intersection\" class=\"fn\">intersection</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>intersection</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#85\">Source</a><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.difference\" class=\"fn\">difference</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>difference</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#89\">Source</a><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.symmetric_difference\" class=\"fn\">symmetric_difference</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;&amp;'a <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>symmetric difference</code> between all elements.</div></details></div></details>","MultiOps<&'a RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiOps%3CRoaringBitmap%3E-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#25-27\">Source</a><a href=\"#impl-MultiOps%3CRoaringBitmap%3E-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#29\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"roaring/trait.MultiOps.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The type of output from operations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#31\">Source</a><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.union\" class=\"fn\">union</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>union</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#35\">Source</a><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.intersection\" class=\"fn\">intersection</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>intersection</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#39\">Source</a><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.difference\" class=\"fn\">difference</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>difference</code> between all elements.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/multiops.rs.html#43\">Source</a><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"roaring/trait.MultiOps.html#tymethod.symmetric_difference\" class=\"fn\">symmetric_difference</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"roaring/trait.MultiOps.html\" title=\"trait roaring::MultiOps\">MultiOps</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt;&gt;::<a class=\"associatedtype\" href=\"roaring/trait.MultiOps.html#associatedtype.Output\" title=\"type roaring::MultiOps::Output\">Output</a></h4></section></summary><div class='docblock'>The <code>symmetric difference</code> between all elements.</div></details></div></details>","MultiOps<RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/mod.rs.html#47\">Source</a><a href=\"#impl-PartialEq-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/mod.rs.html#47\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.87.0/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/cmp.rs.html#8\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_disjoint\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/cmp.rs.html#29\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_disjoint\" class=\"fn\">is_disjoint</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the set has no elements in common with other. This is equivalent to\nchecking for an empty intersection.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb1 = RoaringBitmap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb2 = RoaringBitmap::new();\n\nrb1.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_disjoint(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">true</span>);\n\nrb2.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_disjoint(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">false</span>);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_subset\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/cmp.rs.html#57\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_subset\" class=\"fn\">is_subset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this set is a subset of <code>other</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb1 = RoaringBitmap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb2 = RoaringBitmap::new();\n\nrb1.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_subset(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">false</span>);\n\nrb2.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_subset(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">true</span>);\n\nrb1.insert(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb1.is_subset(<span class=\"kw-2\">&amp;</span>rb2), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_superset\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/cmp.rs.html#94\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_superset\" class=\"fn\">is_superset</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this set is a superset of <code>other</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb1 = RoaringBitmap::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb2 = RoaringBitmap::new();\n\nrb1.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb2.is_superset(<span class=\"kw-2\">&amp;</span>rb1), <span class=\"bool-val\">false</span>);\n\nrb2.insert(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb2.is_superset(<span class=\"kw-2\">&amp;</span>rb1), <span class=\"bool-val\">true</span>);\n\nrb1.insert(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(rb2.is_superset(<span class=\"kw-2\">&amp;</span>rb1), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details></div></details>",0,"kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#14\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#23\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>RoaringBitmap</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n<span class=\"kw\">let </span>rb = RoaringBitmap::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.full\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#35\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.full\" class=\"fn\">full</a>() -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>Creates a full <code>RoaringBitmap</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n<span class=\"kw\">let </span>rb = RoaringBitmap::full();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_lsb0_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#87\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.from_lsb0_bytes\" class=\"fn\">from_lsb0_bytes</a>(offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>, bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>Creates a <code>RoaringBitmap</code> from a byte slice, interpreting the bytes as a bitmap with a specified offset.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>offset: u32</code> - The starting position in the bitmap where the byte slice will be applied, specified in bits.\nThis means that if <code>offset</code> is <code>n</code>, the first byte in the slice will correspond to the <code>n</code>th bit(0-indexed) in the bitmap.</li>\n<li><code>bytes: &amp;[u8]</code> - The byte slice containing the bitmap data. The bytes are interpreted in “Least-Significant-First” bit order.</li>\n</ul>\n<h5 id=\"interpretation-of-bytes\"><a class=\"doc-anchor\" href=\"#interpretation-of-bytes\">§</a>Interpretation of <code>bytes</code></h5>\n<p>The <code>bytes</code> slice is interpreted in “Least-Significant-First” bit order. Each byte is read from least significant bit (LSB) to most significant bit (MSB).\nFor example, the byte <code>0b00000101</code> represents the bits <code>1, 0, 1, 0, 0, 0, 0, 0</code> in that order (see Examples section).</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function will panic if <code>bytes.len() + offset</code> is greater than 2^32.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>bytes = [<span class=\"number\">0b00000101</span>, <span class=\"number\">0b00000010</span>, <span class=\"number\">0b00000000</span>, <span class=\"number\">0b10000000</span>];\n<span class=\"comment\">//             ^^^^^^^^    ^^^^^^^^    ^^^^^^^^    ^^^^^^^^\n//             76543210          98\n</span><span class=\"kw\">let </span>rb = RoaringBitmap::from_lsb0_bytes(<span class=\"number\">0</span>, <span class=\"kw-2\">&amp;</span>bytes);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">0</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">9</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">31</span>));\n\n<span class=\"kw\">let </span>rb = RoaringBitmap::from_lsb0_bytes(<span class=\"number\">8</span>, <span class=\"kw-2\">&amp;</span>bytes);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">8</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">9</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">10</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">17</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">39</span>));\n\n<span class=\"kw\">let </span>rb = RoaringBitmap::from_lsb0_bytes(<span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span>bytes);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">3</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">4</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">5</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">12</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">34</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#187\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Adds a value to the set.</p>\n<p>Returns whether the value was absent from the set.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.insert(<span class=\"number\">3</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(rb.insert(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">3</span>), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#229-231\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.insert_range\" class=\"fn\">insert_range</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts a range of values.\nReturns the number of inserted values.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert_range(<span class=\"number\">2</span>..<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(rb.contains(<span class=\"number\">3</span>));\n<span class=\"macro\">assert!</span>(!rb.contains(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#294\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Pushes <code>value</code> in the bitmap only if it is greater than the current maximum value.</p>\n<p>Returns whether the value was inserted.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert!</span>(rb.push(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(rb.push(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(rb.push(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert!</span>(rb.push(<span class=\"number\">5</span>));\n\n<span class=\"macro\">assert_eq!</span>(rb.iter().collect::&lt;Vec&lt;u32&gt;&gt;(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#347\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Removes a value from the set. Returns <code>true</code> if the value was present in the set.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(rb.remove(<span class=\"number\">3</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(rb.remove(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#378-380\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.remove_range\" class=\"fn\">remove_range</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes a range of values.\nReturns the number of removed values.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert(<span class=\"number\">2</span>);\nrb.insert(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(rb.remove_range(<span class=\"number\">2</span>..<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#422\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.contains\" class=\"fn\">contains</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this set contains the specified integer.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">0</span>), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">100</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#450-452\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.contains_range\" class=\"fn\">contains_range</a>&lt;R&gt;(&amp;self, range: R) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if all values in the range are present in this set.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"comment\">// An empty range is always contained\n</span><span class=\"macro\">assert!</span>(rb.contains_range(<span class=\"number\">7</span>..<span class=\"number\">7</span>));\n\nrb.insert_range(<span class=\"number\">1</span>..<span class=\"number\">0xFFF</span>);\n<span class=\"macro\">assert!</span>(rb.contains_range(<span class=\"number\">1</span>..<span class=\"number\">0xFFF</span>));\n<span class=\"macro\">assert!</span>(rb.contains_range(<span class=\"number\">2</span>..<span class=\"number\">0xFFF</span>));\n<span class=\"comment\">// 0 is not contained\n</span><span class=\"macro\">assert!</span>(!rb.contains_range(<span class=\"number\">0</span>..<span class=\"number\">2</span>));\n<span class=\"comment\">// 0xFFF is not contained\n</span><span class=\"macro\">assert!</span>(!rb.contains_range(<span class=\"number\">1</span>..=<span class=\"number\">0xFFF</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range_cardinality\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#511-513\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.range_cardinality\" class=\"fn\">range_cardinality</a>&lt;R&gt;(&amp;self, range: R) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in this set which are in the passed range.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert_range(<span class=\"number\">0x10000</span>..<span class=\"number\">0x40000</span>);\nrb.insert(<span class=\"number\">0x50001</span>);\nrb.insert(<span class=\"number\">0x50005</span>);\nrb.insert(u32::MAX);\n\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0</span>..<span class=\"number\">0x10000</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0x10000</span>..<span class=\"number\">0x40000</span>), <span class=\"number\">0x30000</span>);\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0x50000</span>..<span class=\"number\">0x60000</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0x10000</span>..<span class=\"number\">0x10000</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(rb.range_cardinality(<span class=\"number\">0x50000</span>..=u32::MAX), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#571\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears all integers in this set.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\nrb.insert(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\nrb.clear();\n<span class=\"macro\">assert_eq!</span>(rb.contains(<span class=\"number\">1</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#589\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if there are no integers in this set.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.is_empty(), <span class=\"bool-val\">true</span>);\n\nrb.insert(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(rb.is_empty(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#605\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if there are every possible integers in this set.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::full();\n<span class=\"macro\">assert!</span>(!rb.is_empty());\n<span class=\"macro\">assert!</span>(rb.is_full());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#628\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of distinct integers added to the set.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.len(), <span class=\"number\">0</span>);\n\nrb.insert(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(rb.len(), <span class=\"number\">1</span>);\n\nrb.insert(<span class=\"number\">3</span>);\nrb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(rb.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#647\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.min\" class=\"fn\">min</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the minimum value in the set (if the set is non-empty).</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.min(), <span class=\"prelude-val\">None</span>);\n\nrb.insert(<span class=\"number\">3</span>);\nrb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(rb.min(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#666\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.max\" class=\"fn\">max</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the maximum value in the set (if the set is non-empty).</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.max(), <span class=\"prelude-val\">None</span>);\n\nrb.insert(<span class=\"number\">3</span>);\nrb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(rb.max(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rank\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#686\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.rank\" class=\"fn\">rank</a>(&amp;self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of integers that are &lt;= value. rank(u32::MAX) == len()</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.rank(<span class=\"number\">0</span>), <span class=\"number\">0</span>);\n\nrb.insert(<span class=\"number\">3</span>);\nrb.insert(<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(rb.rank(<span class=\"number\">3</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(rb.rank(<span class=\"number\">10</span>), <span class=\"number\">2</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#721\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.select\" class=\"fn\">select</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>n</code>th integer in the set or <code>None</code> if <code>n &gt;= len()</code></p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n\nrb.append(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>]);\n\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">100</span>));\n<span class=\"macro\">assert_eq!</span>(rb.select(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_smallest\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#753\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.remove_smallest\" class=\"fn\">remove_smallest</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Removes the <code>n</code> smallests values from this bitmap.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::from_iter([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);\nrb.remove_smallest(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(rb, RoaringBitmap::from_iter([<span class=\"number\">7</span>, <span class=\"number\">9</span>]));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::from_iter([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);\nrb.remove_smallest(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(rb, RoaringBitmap::from_iter([<span class=\"number\">7</span>, <span class=\"number\">9</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_biggest\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/inherent.rs.html#788\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.remove_biggest\" class=\"fn\">remove_biggest</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Removes the <code>n</code> biggests values from this bitmap.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::from_iter([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]);\nrb.remove_biggest(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(rb, RoaringBitmap::from_iter([<span class=\"number\">1</span>, <span class=\"number\">5</span>]));\nrb.remove_biggest(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(rb, RoaringBitmap::from_iter([<span class=\"number\">1</span>]));</code></pre></div>\n</div></details></div></details>",0,"kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#545\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#561\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"roaring/bitmap/iter/struct.Iter.html\" title=\"struct roaring::bitmap::iter::Iter\">Iter</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Iterator over each value stored in the RoaringBitmap, guarantees values are ordered by value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n<span class=\"kw\">use </span>core::iter::FromIterator;\n\n<span class=\"kw\">let </span>bitmap = (<span class=\"number\">1</span>..<span class=\"number\">3</span>).collect::&lt;RoaringBitmap&gt;();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap.iter();\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#594-596\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.range\" class=\"fn\">range</a>&lt;R&gt;(&amp;self, range: R) -&gt; <a class=\"struct\" href=\"roaring/bitmap/iter/struct.Iter.html\" title=\"struct roaring::bitmap::iter::Iter\">Iter</a>&lt;'_&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Iterator over values within a range stored in the RoaringBitmap.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::ops::Bound;\n<span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>bitmap = RoaringBitmap::from([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, u32::MAX]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap.range(<span class=\"number\">10</span>..<span class=\"number\">20</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">11</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap.range(<span class=\"number\">100</span>..);\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(u32::MAX));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap.range((Bound::Excluded(<span class=\"number\">0</span>), Bound::Included(<span class=\"number\">10</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_range\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#651-653\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.into_range\" class=\"fn\">into_range</a>&lt;R&gt;(self, range: R) -&gt; <a class=\"struct\" href=\"roaring/bitmap/iter/struct.IntoIter.html\" title=\"struct roaring::bitmap::iter::IntoIter\">IntoIter</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Iterator over values within a range stored in the RoaringBitmap.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::ops::Bound;\n<span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">fn </span>bitmap() -&gt; RoaringBitmap {\n    RoaringBitmap::from([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, u32::MAX])\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap().into_range(<span class=\"number\">10</span>..<span class=\"number\">20</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">11</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap().into_range(<span class=\"number\">100</span>..);\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(u32::MAX));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = bitmap().into_range((Bound::Excluded(<span class=\"number\">0</span>), Bound::Included(<span class=\"number\">10</span>)));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details></div></details>",0,"kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#787\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sorted_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#817-819\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.from_sorted_iter\" class=\"fn\">from_sorted_iter</a>&lt;I&gt;(\n    iterator: I,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>, <a class=\"struct\" href=\"roaring/struct.NonSortedIntegers.html\" title=\"struct roaring::NonSortedIntegers\">NonSortedIntegers</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create the set from a sorted iterator. Values must be sorted and deduplicated.</p>\n<p>The values of the iterator must be ordered and strictly greater than the greatest value\nin the set. If a value in the iterator doesn’t satisfy this requirement, it is not added\nand the append operation is stopped.</p>\n<p>Returns <code>Ok</code> with the requested <code>RoaringBitmap</code>, <code>Err</code> with the number of elements\nthat were correctly appended before failure.</p>\n<h5 id=\"example-create-a-set-from-an-ordered-list-of-integers\"><a class=\"doc-anchor\" href=\"#example-create-a-set-from-an-ordered-list-of-integers\">§</a>Example: Create a set from an ordered list of integers.</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::from_sorted_iter(<span class=\"number\">0</span>..<span class=\"number\">10</span>).unwrap();\n\n<span class=\"macro\">assert!</span>(rb.iter().eq(<span class=\"number\">0</span>..<span class=\"number\">10</span>));</code></pre></div>\n<h5 id=\"example-try-to-create-a-set-from-a-non-ordered-list-of-integers\"><a class=\"doc-anchor\" href=\"#example-try-to-create-a-set-from-a-non-ordered-list-of-integers\">§</a>Example: Try to create a set from a non-ordered list of integers.</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>integers = <span class=\"number\">0</span>..<span class=\"number\">10u32</span>;\n<span class=\"kw\">let </span>error = RoaringBitmap::from_sorted_iter(integers.rev()).unwrap_err();\n\n<span class=\"macro\">assert_eq!</span>(error.valid_until(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/iter.rs.html#843-846\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.append\" class=\"fn\">append</a>&lt;I&gt;(&amp;mut self, iterator: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>, <a class=\"struct\" href=\"roaring/struct.NonSortedIntegers.html\" title=\"struct roaring::NonSortedIntegers\">NonSortedIntegers</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extend the set with a sorted iterator.</p>\n<p>The values of the iterator must be ordered and strictly greater than the greatest value\nin the set. If a value in the iterator doesn’t satisfy this requirement, it is not added\nand the append operation is stopped.</p>\n<p>Returns <code>Ok</code> with the number of elements appended to the set, <code>Err</code> with\nthe number of elements we effectively appended before an error occurred.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rb = RoaringBitmap::new();\n<span class=\"macro\">assert_eq!</span>(rb.append(<span class=\"number\">0</span>..<span class=\"number\">10</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));\n\n<span class=\"macro\">assert!</span>(rb.iter().eq(<span class=\"number\">0</span>..<span class=\"number\">10</span>));</code></pre></div>\n</div></details></div></details>",0,"kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#11\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection_len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#29\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.intersection_len\" class=\"fn\">intersection_len</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the len of the intersection with the specified other bitmap without creating a\nnew bitmap.</p>\n<p>This is faster and more space efficient when you’re only interested in the cardinality of\nthe intersection.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n\n<span class=\"macro\">assert_eq!</span>(rb1.intersection_len(<span class=\"kw-2\">&amp;</span>rb2), (rb1 &amp; rb2).len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union_len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#56\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.union_len\" class=\"fn\">union_len</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the len of the union with the specified other bitmap without creating a new bitmap.</p>\n<p>This is faster and more space efficient when you’re only interested in the cardinality of\nthe union.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n\n<span class=\"macro\">assert_eq!</span>(rb1.union_len(<span class=\"kw-2\">&amp;</span>rb2), (rb1 | rb2).len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference_len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#77\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.difference_len\" class=\"fn\">difference_len</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the len of the difference with the specified other bitmap without creating a new\nbitmap.</p>\n<p>This is faster and more space efficient when you’re only interested in the cardinality of\nthe difference.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n\n<span class=\"macro\">assert_eq!</span>(rb1.difference_len(<span class=\"kw-2\">&amp;</span>rb2), (rb1 - rb2).len());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference_len\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#98\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.symmetric_difference_len\" class=\"fn\">symmetric_difference_len</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Computes the len of the symmetric difference with the specified other bitmap without\ncreating a new bitmap.</p>\n<p>This is faster and more space efficient when you’re only interested in the cardinality of\nthe symmetric difference.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n\n<span class=\"macro\">assert_eq!</span>(rb1.symmetric_difference_len(<span class=\"kw-2\">&amp;</span>rb2), (rb1 ^ rb2).len());</code></pre></div>\n</div></details></div></details>",0,"kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops_with_serialized.rs.html#18\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection_with_serialized_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops_with_serialized.rs.html#44-46\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.intersection_with_serialized_unchecked\" class=\"fn\">intersection_with_serialized_unchecked</a>&lt;R&gt;(\n    &amp;self,\n    other: R,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a>,</div></h4></section></summary><div class=\"docblock\"><p>Computes the intersection between a materialized <a href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\"><code>RoaringBitmap</code></a> and a serialized one.</p>\n<p>This is faster and more space efficient when you only need the intersection result.\nIt reduces the number of deserialized internal container and therefore\nthe number of allocations and copies of bytes.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n<span class=\"kw\">use </span>std::io::Cursor;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span>rb2: RoaringBitmap = (<span class=\"number\">3</span>..<span class=\"number\">5</span>).collect();\n\n<span class=\"comment\">// Let's say the rb2 bitmap is serialized\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = Vec::new();\nrb2.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2_bytes = Cursor::new(bytes);\n\n<span class=\"macro\">assert_eq!</span>(\n    rb1.intersection_with_serialized_unchecked(rb2_bytes).unwrap(),\n    rb1 &amp; rb2,\n);</code></pre></div>\n</div></details></div></details>",0,"kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#19\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialized_size\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#35\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.serialized_size\" class=\"fn\">serialized_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the size in bytes of the serialized output.\nThis is compatible with the official C/C++, Java and Go implementations.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = Vec::with_capacity(rb1.serialized_size());\nrb1.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2 = RoaringBitmap::deserialize_from(<span class=\"kw-2\">&amp;</span>bytes[..]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(rb1, rb2);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_into\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#66\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.serialize_into\" class=\"fn\">serialize_into</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class=\"docblock\"><p>Serialize this bitmap into <a href=\"https://github.com/RoaringBitmap/RoaringFormatSpec\">the standard Roaring on-disk format</a>.\nThis is compatible with the official C/C++, Java and Go implementations.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"macro\">vec!</span>[];\nrb1.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2 = RoaringBitmap::deserialize_from(<span class=\"kw-2\">&amp;</span>bytes[..]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(rb1, rb2);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_from\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#126\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.deserialize_from\" class=\"fn\">deserialize_from</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class=\"docblock\"><p>Deserialize a bitmap into memory from <a href=\"https://github.com/RoaringBitmap/RoaringFormatSpec\">the standard Roaring on-disk\nformat</a>. This is compatible with the official C/C++, Java and\nGo implementations. This method checks that all of the internal values\nare valid. If deserializing from a trusted source consider\n<a href=\"roaring/bitmap/struct.RoaringBitmap.html#method.deserialize_unchecked_from\" title=\"associated function roaring::bitmap::RoaringBitmap::deserialize_unchecked_from\">RoaringBitmap::deserialize_unchecked_from</a></p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"macro\">vec!</span>[];\nrb1.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2 = RoaringBitmap::deserialize_from(<span class=\"kw-2\">&amp;</span>bytes[..]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(rb1, rb2);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_unchecked_from\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/serialization.rs.html#149\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.deserialize_unchecked_from\" class=\"fn\">deserialize_unchecked_from</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class=\"docblock\"><p>Deserialize a bitmap into memory from <a href=\"https://github.com/RoaringBitmap/RoaringFormatSpec\">the standard Roaring on-disk\nformat</a>. This is compatible with the official C/C++, Java and\nGo implementations. This method is memory safe but will not check if\nthe data is a valid bitmap.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span>rb1: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">4</span>).collect();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"macro\">vec!</span>[];\nrb1.serialize_into(<span class=\"kw-2\">&amp;mut </span>bytes).unwrap();\n<span class=\"kw\">let </span>rb2 = RoaringBitmap::deserialize_unchecked_from(<span class=\"kw-2\">&amp;</span>bytes[..]).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(rb1, rb2);</code></pre></div>\n</div></details></div></details>",0,"kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/statistics.rs.html#40\">Source</a><a href=\"#impl-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.statistics\" class=\"method\"><a class=\"src rightside\" href=\"src/roaring/bitmap/statistics.rs.html#63\">Source</a><h4 class=\"code-header\">pub fn <a href=\"roaring/bitmap/struct.RoaringBitmap.html#tymethod.statistics\" class=\"fn\">statistics</a>(&amp;self) -&gt; <a class=\"struct\" href=\"roaring/bitmap/statistics/struct.Statistics.html\" title=\"struct roaring::bitmap::statistics::Statistics\">Statistics</a></h4></section></summary><div class=\"docblock\"><p>Returns statistics about the composition of a roaring bitmap.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>roaring::RoaringBitmap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bitmap: RoaringBitmap = (<span class=\"number\">1</span>..<span class=\"number\">100</span>).collect();\n<span class=\"kw\">let </span>statistics = bitmap.statistics();\n\n<span class=\"macro\">assert_eq!</span>(statistics.n_containers, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_array_containers, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_run_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_bitset_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_values_array_containers, <span class=\"number\">99</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_values_run_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_values_bitset_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_bytes_array_containers, <span class=\"number\">512</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_bytes_run_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.n_bytes_bitset_containers, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(statistics.max_value, <span class=\"prelude-val\">Some</span>(<span class=\"number\">99</span>));\n<span class=\"macro\">assert_eq!</span>(statistics.min_value, <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(statistics.cardinality, <span class=\"number\">99</span>);</code></pre></div>\n</div></details></div></details>",0,"kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#285\">Source</a><a href=\"#impl-Sub%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#289\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>A <code>difference</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#286\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<&RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#275\">Source</a><a href=\"#impl-Sub-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#279\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>) -&gt; <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class=\"docblock\"><p>A <code>difference</code> between two sets.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#276\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#336\">Source</a><a href=\"#impl-SubAssign%3C%26RoaringBitmap%3E-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>&gt; for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#338\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>A <code>difference</code> between two sets.</p>\n</div></details></div></details>","SubAssign<&RoaringBitmap>","kalosm_language::vector_db::Candidates"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#329\">Source</a><a href=\"#impl-SubAssign-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/ops.rs.html#331\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a>)</h4></section></summary><div class=\"docblock\"><p>A <code>difference</code> between two sets.</p>\n</div></details></div></details>","SubAssign","kalosm_language::vector_db::Candidates"],["<section id=\"impl-StructuralPartialEq-for-RoaringBitmap\" class=\"impl\"><a class=\"src rightside\" href=\"src/roaring/bitmap/mod.rs.html#47\">Source</a><a href=\"#impl-StructuralPartialEq-for-RoaringBitmap\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"roaring/bitmap/struct.RoaringBitmap.html\" title=\"struct roaring::bitmap::RoaringBitmap\">RoaringBitmap</a></h3></section>","StructuralPartialEq","kalosm_language::vector_db::Candidates"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[145386,144007]}